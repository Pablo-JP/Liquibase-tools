CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_GENERATE_SEQUENCE 
   (
    PA_NUMBER_SEQUENCES     IN NUMBER
   ,PA_STATUS_CODE          OUT NUMBER
   ,PA_STATUS_MSG           OUT VARCHAR2
   ,PA_CUR_SEQUENCE         OUT SC_CREDIT.PA_TYPES.TYP_CURSOR
   )
   IS
  /* **************************************************************
   * DESCRIPTION: SEQUENCE CALCULATION PROCEDURE
   * PRECONDITIONS: LOAN FORMALIZATION
   * CREATED DATE: 30/10/2024
   * CREATOR: CRISTHIAN MORALES
   ************************************************************** */

   --CONSTANTS
   CSL_ARROW             CONSTANT VARCHAR2(20)   := '->';
   CSL_0                 CONSTANT SIMPLE_INTEGER := 0;
   CSL_MSG_SUCCESS       CONSTANT VARCHAR2(20)   := 'SUCCESS';
   CSL_1                 CONSTANT SIMPLE_INTEGER := 1;
   CSL_PKG               CONSTANT SIMPLE_INTEGER := 1;
   CSL_INVALID_SEQUENCE  CONSTANT VARCHAR2(20)   := 'INVALID SEQUENCE';

   EXC_INVALID_SEQUENCE_PARAMS EXCEPTION;
   BEGIN

   --VALIDATION PA_NUMER_SEQUENCES IS NOT NULL
   IF PA_NUMBER_SEQUENCES IS NULL OR PA_NUMBER_SEQUENCES <= 0 THEN
      RAISE EXC_INVALID_SEQUENCE_PARAMS;
   END IF;

      PA_STATUS_CODE:=CSL_0;
      PA_STATUS_MSG :=CSL_MSG_SUCCESS;
      PA_CUR_SEQUENCE :=NULL;

   OPEN PA_CUR_SEQUENCE FOR
      SELECT ROWNUM AS ORDEN
            ,SC_CREDIT.FN_GET_NEXT_LOAN_OPERATION_ID   AS OPERATION_SEQ
            ,SC_CREDIT.FN_GET_NEXT_LOAN_BALANCE_ID     AS BALANCE_SEQ
        FROM DUAL CONNECT BY
       LEVEL <= PA_NUMBER_SEQUENCES;

   --EXCEPTION HANDLING
   EXCEPTION
      WHEN EXC_INVALID_SEQUENCE_PARAMS THEN
      PA_STATUS_CODE := CSL_1;
      PA_STATUS_MSG := CSL_INVALID_SEQUENCE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(
            UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_PKG)
            ,SQLCODE
            ,CSL_INVALID_SEQUENCE
            ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
            ,CSL_0
            ,NULL
            );

   WHEN OTHERS THEN
      ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

       SC_CREDIT.SP_BATCH_ERROR_LOG(
            UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_PKG)
            ,SQLCODE
            ,SQLERRM
            ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
            ,CSL_0
            ,NULL
            );

   END SP_BTC_GENERATE_SEQUENCE;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_GENERATE_SEQUENCE TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_GENERATE_SEQUENCE TO USRBTCCREDIT1
/
