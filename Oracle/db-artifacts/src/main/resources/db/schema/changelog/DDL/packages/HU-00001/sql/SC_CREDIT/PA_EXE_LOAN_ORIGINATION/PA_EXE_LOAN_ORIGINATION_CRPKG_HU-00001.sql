CREATE OR REPLACE  PACKAGE SC_CREDIT.PA_EXE_LOAN_ORIGINATION 
  AS
    --CONSTANTS GLOB
    CSG_ZERO                 CONSTANT SIMPLE_INTEGER := 0;
    CSG_X                    CONSTANT VARCHAR2(1) := 'X';
    CSG_ARROW                CONSTANT VARCHAR2(5) := ' -> ';
    CSG_HYPHEN               CONSTANT VARCHAR2(5) := ' - ';
    CSG_COLON                CONSTANT VARCHAR2(5) := ' : ';
    CSG_SUCCESS_CODE         CONSTANT SIMPLE_INTEGER := 0;
    CSG_SUCCESS_MSG          CONSTANT VARCHAR2(10) := 'SUCCESS';
    CSG_ONE                  CONSTANT SIMPLE_INTEGER := 1;
    CSG_CURRENT_DATE         CONSTANT DATE := SYSDATE;
    CSG_CURRENT_USER         CONSTANT VARCHAR2(30) := USER;
    CSG_DATA_NOT_SAVED_CODE  CONSTANT SIMPLE_INTEGER := -20400;
    CSG_DATA_NOT_SAVED_MSG   CONSTANT VARCHAR2(50) := 'THE DATA NOT SAVED';
    CSG_FOREING_KEY_CODE     CONSTANT SIMPLE_INTEGER := -2291;
    CSG_FOREING_KEY_MSG      CONSTANT VARCHAR2(50) := 'THE FOREING KEY VIOLATED';
    CSG_PRIMARY_KEY_CODE     CONSTANT SIMPLE_INTEGER := -00001;
    CSG_PRIMARY_KEY_MSG      CONSTANT VARCHAR2(50) := 'DATA DUPLICATED';
    CSG_DUPLICATE_DATA_CODE  CONSTANT SIMPLE_INTEGER := -20409;
    CSG_DUPLICATE_DATA_MSG   CONSTANT VARCHAR2(50) := 'THE DATA ALREADY EXISTS';
    CSG_FORMAT_DATE          CONSTANT VARCHAR2(50) := 'YYYY-MM-DDTHH24:MI:SSTZH:TZM';

    --PROCEDURE TO ORQUEST THE ORIGINATION OF A LOAN
    PROCEDURE SP_EXE_LOAN_ORIGINATION(
    PA_LOAN_DATA                    IN CLOB,
    PA_PAYMENT_SCHEDULE_DATA        IN CLOB,
    PA_DATA_LOAN_OPERATION          IN CLOB,
    PA_DATA_LOAN_OPERATION_DETAIL   IN CLOB,
    PA_DATA_LOAN_BALANCE            IN CLOB,
    PA_DATA_LOAN_BALANCE_DETAIL     IN CLOB,
    PA_PAYMENT_SCHEDULE_FEE_DATA    IN CLOB,
    PA_STATUS_CODE                  OUT NUMBER,
    PA_STATUS_MSG                   OUT VARCHAR2);

     --PROCEDURE TO INSERT LOAN
    PROCEDURE SP_INS_LOAN (
    PA_LOAN_DATA                IN CLOB,
    PA_FINANCE_CHARGE_BALANCE   OUT NUMBER,
    PA_STATUS_CODE              OUT NUMBER,
    PA_STATUS_MSG               OUT VARCHAR2);

    --PROCEDURE TO INSERT PAYMENT SCHEDULE
    PROCEDURE SP_INS_PAYMENT_SCHEDULE (
    PA_PAYMENT_SCHEDULE_DATA    IN CLOB,
    PA_STATUS_CODE              OUT NUMBER,
    PA_STATUS_MSG               OUT VARCHAR2);

    --PROCEDURE TO INSERT OPERATION
    PROCEDURE SP_INS_LOAN_OPERATION(
    PA_DATA_LOAN_OPERATION    IN CLOB
    ,PA_LOAN_OPERATION_ID     IN NUMBER
    ,PA_STATUS_CODE           OUT NUMBER
    ,PA_STATUS_MSG            OUT VARCHAR2);

    --PROCEDURE TO INSERT OPERATION DETAIL
    PROCEDURE SP_INS_LOAN_OPERATION_DETAIL (
    PA_DATA_LOAN_OPERATION_DETAIL IN CLOB
    ,PA_LOAN_OPERATION_ID         IN NUMBER
    ,PA_STATUS_CODE               OUT NUMBER
    ,PA_STATUS_MSG                OUT VARCHAR2);

  --PROCEDURE TO INSERT BALANCE
  PROCEDURE SP_INS_LOAN_BALANCE (
    PA_DATA_LOAN_BALANCE    IN CLOB
    ,PA_LOAN_BALANCE_ID     IN NUMBER
    ,PA_LOAN_OPERATION_ID   IN NUMBER
    ,PA_STATUS_CODE         OUT NUMBER
    ,PA_STATUS_MSG          OUT VARCHAR2);

   --PROCEDURE TO INSERT BALANCE DETAIL
  PROCEDURE SP_INS_LOAN_BALANCE_DETAIL (
    PA_DATA_LOAN_BALANCE_DETAIL IN CLOB
    ,PA_LOAN_BALANCE_ID         IN NUMBER
    ,PA_STATUS_CODE             OUT NUMBER
    ,PA_STATUS_MSG              OUT VARCHAR2);

    --PROCEDURE TO INSERT PAYMENT SCHEDULE FEE
    PROCEDURE SP_INS_PAYMENT_SCHEDULE_FEE (
    PA_PAYMENT_SCHEDULE_FEE_DATA    IN CLOB,
    PA_STATUS_CODE                  OUT NUMBER,
    PA_STATUS_MSG                   OUT VARCHAR2);
  END PA_EXE_LOAN_ORIGINATION;

/




CREATE OR REPLACE  PACKAGE BODY SC_CREDIT.PA_EXE_LOAN_ORIGINATION 
  AS
  PROCEDURE SP_EXE_LOAN_ORIGINATION(
    PA_LOAN_DATA                    IN CLOB,
    PA_PAYMENT_SCHEDULE_DATA        IN CLOB,
    PA_DATA_LOAN_OPERATION          IN CLOB,
    PA_DATA_LOAN_OPERATION_DETAIL   IN CLOB,
    PA_DATA_LOAN_BALANCE            IN CLOB,
    PA_DATA_LOAN_BALANCE_DETAIL     IN CLOB,
    PA_PAYMENT_SCHEDULE_FEE_DATA    IN CLOB,
    PA_STATUS_CODE                  OUT NUMBER,
    PA_STATUS_MSG                   OUT VARCHAR2)
  AS
/*****************************************************************
* PROJECT:              NCP-OUTSTANDING BALANCE
* DESCRIPTION:          PACKAGE FOR ORIGINATION TO REGISTER A NEW LOAN.
* CREATOR:              RICARDO HAZAEL GOMEZ ALVAREZ/JOSE DE JESUS BRAVO AGUILAR
* CREATED DATE:         OCT-21-2024
* MODIFICATED DATE:     JAN-22-2024
* [NCPACS-4804 V1]
*****************************************************************/
  -- CONSTANTS LOCAL
    CSL_EXE_LOAN                        CONSTANT VARCHAR2(50) := 'SP_EXE_LOAN_ORIGINATION ';
    CSL_ISSUE_NULL_DATA_LOAN_CODE       CONSTANT SIMPLE_INTEGER := -20020;
    CSL_ISSUE_NULL_DATA_LOAN_MSG        CONSTANT VARCHAR2(80) := 'ISSUE IN SP_INS_LOAN: ';
    CSL_ISSUE_NULL_DATA_PAY_CODE        CONSTANT SIMPLE_INTEGER := -20030;
    CSL_ISSUE_NULL_DATA_PAY_MSG         CONSTANT VARCHAR2(80) := 'ISSUE IN SP_INS_PAYMENT_SCHEDULE: ';
    CSL_ISSUE_OPERATION_ID_CODE         CONSTANT SIMPLE_INTEGER := -20040;
    CSL_ISSUE_OPERATION_ID_MSG          CONSTANT VARCHAR2(100) := 'FAILED TO RETRIEVE A VALID ID FOR THE OPERATION OR BALANCE.';
    CSL_ISSUE_OPERATION_CODE            CONSTANT SIMPLE_INTEGER := -20050;
    CSL_ISSUE_OPERATION_MSG             CONSTANT VARCHAR2(50) := 'ISSUE IN SP_INS_LOAN_OPERATION: ';
    CSL_ISSUE_OPERATION_DETAIL_CODE     CONSTANT SIMPLE_INTEGER := -20060;
    CSL_ISSUE_OPERATION_DETAIL_MSG      CONSTANT VARCHAR2(50) := 'ISSUE IN SP_INS_LOAN_OPERATION_DETAIL: ';
    CSL_ISSUE_BALANCE_CODE              CONSTANT SIMPLE_INTEGER := -20070;
    CSL_ISSUE_BALANCE_MSG               CONSTANT VARCHAR2(50) := 'ISSUE IN SP_INS_LOAN_BALANCE: ';
    CSL_ISSUE_BALANCE_DETAIL_CODE       CONSTANT SIMPLE_INTEGER := -20080;
    CSL_ISSUE_BALANCE_DETAIL_MSG        CONSTANT VARCHAR2(50) := 'ISSUE IN SP_INS_LOAN_BALANCE_DETAIL: ';
    CSL_ISSUE_PMT_SCHEDULE_FEE_CODE     CONSTANT SIMPLE_INTEGER := -20120;
    CSL_ISSUE_PMT_SCHEDULE_FEE_MSG      CONSTANT VARCHAR2(50) := 'ISSUE IN SP_INS_PAYMENT_SCHEDULE_FEE: ';
    -- EXCEPTIONS
    EXC_NULL_DATA_LOAN EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_NULL_DATA_LOAN, CSL_ISSUE_NULL_DATA_LOAN_CODE);
    EXC_NULL_DATA_PAYMENT EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_NULL_DATA_PAYMENT, CSL_ISSUE_NULL_DATA_PAY_CODE);
    EXC_ISSUE_OPERATION_ID EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_OPERATION_ID, CSL_ISSUE_OPERATION_ID_CODE);
    EXC_ISSUE_OPERATION EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_OPERATION, CSL_ISSUE_OPERATION_CODE);
    EXC_ISSUE_OPERATION_DETAIL EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_OPERATION_DETAIL, CSL_ISSUE_OPERATION_DETAIL_CODE);
    EXC_ISSUE_BALANCE EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_BALANCE, CSL_ISSUE_BALANCE_CODE);
    EXC_ISSUE_BALANCE_DETAIL EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_BALANCE_DETAIL, CSL_ISSUE_BALANCE_DETAIL_CODE);
    EXC_ISSUE_PAYMENT_SCHEDULE_FEE EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_ISSUE_PAYMENT_SCHEDULE_FEE, CSL_ISSUE_PMT_SCHEDULE_FEE_CODE);
    --VARIABLES
    VL_LOAN_OPERATION_ID            NUMBER(15);
    PA_LOAN_OPERATION_ID            NUMBER(15);
    VL_LOAN_BALANCE_ID              NUMBER(15);
    PA_LOAN_BALANCE_ID              NUMBER(15);
    PA_FINANCE_CHARGE_BALANCE       NUMBER(12,2);

    BEGIN
    SP_INS_LOAN (
    --PROCEDURE TO INSERT LOAN
      PA_LOAN_DATA,
      PA_FINANCE_CHARGE_BALANCE,
      PA_STATUS_CODE,
      PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      ROLLBACK;
      RAISE EXC_NULL_DATA_LOAN;
    END IF;

    SP_INS_PAYMENT_SCHEDULE (
    --PROCEDURE TO INSERT PAYMENT SCHEDULE
      PA_PAYMENT_SCHEDULE_DATA,
      PA_STATUS_CODE,
      PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      ROLLBACK;
      RAISE EXC_NULL_DATA_PAYMENT;
    END IF;

    IF PA_FINANCE_CHARGE_BALANCE > CSG_ZERO THEN
        BEGIN
    VL_LOAN_OPERATION_ID := SC_CREDIT.FN_GET_NEXT_LOAN_OPERATION_ID;
    VL_LOAN_BALANCE_ID := SC_CREDIT.FN_GET_NEXT_LOAN_BALANCE_ID;

    IF VL_LOAN_OPERATION_ID IS NULL OR VL_LOAN_BALANCE_ID IS NULL THEN
        PA_STATUS_CODE := CSL_ISSUE_OPERATION_ID_CODE;
        PA_STATUS_MSG := CSL_ISSUE_OPERATION_ID_MSG;
        RAISE EXC_ISSUE_OPERATION_ID;
     END IF;

    PA_LOAN_OPERATION_ID := VL_LOAN_OPERATION_ID;
    PA_LOAN_BALANCE_ID := VL_LOAN_BALANCE_ID;

            SP_INS_LOAN_OPERATION (
            --PROCEDURE TO INSERT OPERATION
                PA_DATA_LOAN_OPERATION
                ,PA_LOAN_OPERATION_ID
                ,PA_STATUS_CODE
                ,PA_STATUS_MSG);
            IF PA_STATUS_CODE <> CSG_ZERO THEN
            RAISE EXC_ISSUE_OPERATION;
            END IF;

            SP_INS_LOAN_OPERATION_DETAIL (
            --PROCEDURE TO INSERT OPERATION DETAIL
                PA_DATA_LOAN_OPERATION_DETAIL
                ,PA_LOAN_OPERATION_ID
                ,PA_STATUS_CODE
                ,PA_STATUS_MSG);
            IF PA_STATUS_CODE <> CSG_ZERO THEN
            RAISE EXC_ISSUE_OPERATION_DETAIL;
            END IF;

            SP_INS_LOAN_BALANCE (
            --PROCEDURE TO INSERT BALANCE
                PA_DATA_LOAN_BALANCE
                ,PA_LOAN_BALANCE_ID
                ,PA_LOAN_OPERATION_ID
                ,PA_STATUS_CODE
                ,PA_STATUS_MSG);
            IF PA_STATUS_CODE <> CSG_ZERO THEN
            RAISE EXC_ISSUE_BALANCE;
            END IF;

            SP_INS_LOAN_BALANCE_DETAIL (
            --PROCEDURE TO INSERT BALANCE DETAIL
                PA_DATA_LOAN_BALANCE_DETAIL
                ,PA_LOAN_BALANCE_ID
                ,PA_STATUS_CODE
                ,PA_STATUS_MSG);
            IF PA_STATUS_CODE <> CSG_ZERO THEN
            RAISE EXC_ISSUE_BALANCE_DETAIL;
            END IF;

            SP_INS_PAYMENT_SCHEDULE_FEE (
            --PROCEDURE TO INSERT PAYMENT SCHEDULE FEE
                PA_PAYMENT_SCHEDULE_FEE_DATA
                ,PA_STATUS_CODE
                ,PA_STATUS_MSG);
            IF PA_STATUS_CODE <> CSG_ZERO THEN
            RAISE EXC_ISSUE_PAYMENT_SCHEDULE_FEE;
            END IF;
            END;
        END IF;
  COMMIT;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
      WHEN EXC_NULL_DATA_LOAN THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_NULL_DATA_LOAN_MSG ||CSL_ISSUE_NULL_DATA_LOAN_CODE|| CSG_ARROW ||PA_STATUS_CODE||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_NULL_DATA_LOAN_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_NULL_DATA_PAYMENT THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_NULL_DATA_PAY_MSG ||CSL_ISSUE_NULL_DATA_PAY_CODE|| CSG_ARROW ||PA_STATUS_CODE||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_NULL_DATA_PAY_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_ISSUE_OPERATION THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_OPERATION_MSG || CSL_ISSUE_OPERATION_CODE || CSG_ARROW || PA_STATUS_CODE ||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_OPERATION_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_ISSUE_OPERATION_DETAIL THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_OPERATION_DETAIL_MSG || CSL_ISSUE_OPERATION_DETAIL_CODE  || CSG_ARROW || PA_STATUS_CODE ||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_OPERATION_DETAIL_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_ISSUE_BALANCE THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_BALANCE_MSG || CSL_ISSUE_BALANCE_CODE || CSG_ARROW || PA_STATUS_CODE ||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_BALANCE_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_ISSUE_BALANCE_DETAIL THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_BALANCE_DETAIL_MSG || CSL_ISSUE_BALANCE_DETAIL_CODE || CSG_ARROW || PA_STATUS_CODE ||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_BALANCE_DETAIL_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN EXC_ISSUE_PAYMENT_SCHEDULE_FEE THEN
      ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_PMT_SCHEDULE_FEE_MSG || CSL_ISSUE_PMT_SCHEDULE_FEE_CODE || CSG_ARROW || PA_STATUS_CODE ||
      CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_PMT_SCHEDULE_FEE_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
      WHEN OTHERS THEN
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_LOAN, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
        ROLLBACK;

    IF PA_STATUS_CODE = CSG_ZERO THEN
      PA_STATUS_CODE := -1;
    END IF;
  END SP_EXE_LOAN_ORIGINATION;

  PROCEDURE SP_INS_LOAN (
    PA_LOAN_DATA                IN CLOB,
    PA_FINANCE_CHARGE_BALANCE   OUT NUMBER,
    PA_STATUS_CODE              OUT NUMBER,
    PA_STATUS_MSG               OUT VARCHAR2)
  AS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT LOAN
************************************************************** */
  -- LOCAL CONSTANS
  CSL_INSERT_LOAN                 CONSTANT VARCHAR2(50) := 'SP_INS_LOAN';
  CSL_LOAN_ALREADY_EXISTS_CODE    CONSTANT SIMPLE_INTEGER := -20021;
  CSL_LOAN_ALREADY_EXISTS_MSG    CONSTANT VARCHAR2(80) := 'LOAN ID ALREADY EXISTS';
  --VARIABLES
  VL_LOAN_ID                      NUMBER(15);
  VL_COUNTRY_ID                   NUMBER(3);
  VL_COMPANY_ID                   NUMBER(3);
  VL_BUSINESS_UNIT_ID             NUMBER(5);
  VL_ADMIN_CENTER_ID              NUMBER(8);
  VL_ORIGINATION_CENTER_ID        NUMBER(8);
  VL_PLATFORM_ID                  VARCHAR2(6);
  VL_SUB_PLATFORM_ID              VARCHAR2(6);
  VL_CUSTOMER_ID                  VARCHAR2(36);
  VL_PRODUCT_ID                   NUMBER(10);
  VL_PRINCIPAL_AMOUNT             NUMBER(12,2);
  VL_FINANCE_CHARGE_AMOUNT        NUMBER(12,2);
  VL_PRINCIPAL_BALANCE            NUMBER(12,2);
  VL_FINANCE_CHARGE_BALANCE       NUMBER(12,2);
  VL_ADDITIONAL_CHARGE_BALANCE    NUMBER(12,2);
  VL_ORIGINATION_DATE_CHAR        VARCHAR2(30);
  VL_ORIGINATION_DATE             DATE;
  VL_FIRST_PAYMENT_CHAR           VARCHAR2(30);
  VL_FIRST_PAYMENT                DATE;
  VL_DUE_DATE_CHAR                VARCHAR2(30);
  VL_DUE_DATE                     DATE;
  VL_APR                          NUMBER(12,6);
  VL_INTEREST_RATE                NUMBER(12,2);
  VL_NUMBER_OF_PAYMENTS           NUMBER(5);
  VL_TERM_TYPE                    NUMBER(5);
  VL_LOAN_STATUS_ID               NUMBER(5);
  VL_ACCRUED_TYPE_ID              NUMBER(5);
  VL_RULE_ID                      NUMBER(5);
  VL_END_USER                     VARCHAR2(10);
  VL_OPERATION_DATE_CHAR          VARCHAR2(30);
  VL_OPERATION_DATE               DATE;
  VL_UUID_TRACKING                VARCHAR2(36);
  VL_IP_ADDRESS                   VARCHAR2(39);
  VL_DEVICE                       VARCHAR2(50);
  VL_TRANSACTION                  NUMBER(33);
  VL_LOAN_EFFECTIVE_DATE_CHAR     VARCHAR2(30);
  VL_LOAN_EFFECTIVE_DATE          DATE;
  VL_INSERT_COUNT                 NUMBER(3);
  VL_EXISTING_LOAN_COUNT          NUMBER(1);
  VL_SUBTERM_TYPE_ID              NUMBER(5);

  -- EXCEPTIONS
  EXC_FOREING_KEY_VIOLATION   EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EXC_DATA_NOT_SAVED          EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EX_DUPLICATE_PK             EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
  EXC_LOAN_ALREADY_EXISTS     EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_LOAN_ALREADY_EXISTS, CSL_LOAN_ALREADY_EXISTS_CODE);

  BEGIN
    VL_LOAN_ID                          := JSON_VALUE(PA_LOAN_DATA, '$.loanId');
    VL_COUNTRY_ID                       := JSON_VALUE(PA_LOAN_DATA, '$.countryId');
    VL_COMPANY_ID                       := JSON_VALUE(PA_LOAN_DATA, '$.companyId');
    VL_BUSINESS_UNIT_ID                 := JSON_VALUE(PA_LOAN_DATA, '$.businessUnitId');
    VL_ADMIN_CENTER_ID                  := JSON_VALUE(PA_LOAN_DATA, '$.adminCenterId');
    VL_ORIGINATION_CENTER_ID            := JSON_VALUE(PA_LOAN_DATA, '$.originationCenterId');
    VL_PLATFORM_ID                      := JSON_VALUE(PA_LOAN_DATA, '$.platformId');
    VL_SUB_PLATFORM_ID                  := JSON_VALUE(PA_LOAN_DATA, '$.subPlatformId');
    VL_CUSTOMER_ID                      := JSON_VALUE(PA_LOAN_DATA, '$.customerId');
    VL_PRODUCT_ID                       := JSON_VALUE(PA_LOAN_DATA, '$.productId');
    VL_PRINCIPAL_AMOUNT                 := JSON_VALUE(PA_LOAN_DATA, '$.principalAmount');
    VL_FINANCE_CHARGE_AMOUNT            := JSON_VALUE(PA_LOAN_DATA, '$.financeChargeAmount');
    VL_PRINCIPAL_BALANCE                := JSON_VALUE(PA_LOAN_DATA, '$.principalBalance');
    VL_FINANCE_CHARGE_BALANCE           := JSON_VALUE(PA_LOAN_DATA, '$.financeChargeBalance');
    VL_ADDITIONAL_CHARGE_BALANCE        := JSON_VALUE(PA_LOAN_DATA, '$.additionalChargeBalance');
    VL_ORIGINATION_DATE_CHAR            := JSON_VALUE(PA_LOAN_DATA, '$.originationDate');
    VL_FIRST_PAYMENT_CHAR               := JSON_VALUE(PA_LOAN_DATA, '$.firstPayment');
    VL_DUE_DATE_CHAR                    := JSON_VALUE(PA_LOAN_DATA, '$.dueDate');
    VL_APR                              := JSON_VALUE(PA_LOAN_DATA, '$.apr');
    VL_INTEREST_RATE                    := JSON_VALUE(PA_LOAN_DATA, '$.interestRate');
    VL_NUMBER_OF_PAYMENTS               := JSON_VALUE(PA_LOAN_DATA, '$.numberOfPayments');
    VL_TERM_TYPE                        := JSON_VALUE(PA_LOAN_DATA, '$.termType');
    VL_LOAN_STATUS_ID                   := JSON_VALUE(PA_LOAN_DATA, '$.loanStatusId');
    VL_ACCRUED_TYPE_ID                  := JSON_VALUE(PA_LOAN_DATA, '$.accruedTypeId');
    VL_RULE_ID                          := JSON_VALUE(PA_LOAN_DATA, '$.ruleId');
    VL_END_USER                         := JSON_VALUE(PA_LOAN_DATA, '$.endUser');
    VL_OPERATION_DATE_CHAR              := JSON_VALUE(PA_LOAN_DATA, '$.operationDate');
    VL_UUID_TRACKING                    := JSON_VALUE(PA_LOAN_DATA, '$.uuidTracking');
    VL_IP_ADDRESS                       := JSON_VALUE(PA_LOAN_DATA, '$.ipAddress');
    VL_DEVICE                           := JSON_VALUE(PA_LOAN_DATA, '$.device');
    VL_TRANSACTION                      := JSON_VALUE(PA_LOAN_DATA, '$.transaction');
    VL_LOAN_EFFECTIVE_DATE_CHAR         := JSON_VALUE(PA_LOAN_DATA, '$.loanEffectiveDate');
    VL_ORIGINATION_DATE                 := CAST(TO_TIMESTAMP_TZ(VL_ORIGINATION_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_FIRST_PAYMENT                    := CAST(TO_TIMESTAMP_TZ(VL_FIRST_PAYMENT_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_DUE_DATE                         := CAST(TO_TIMESTAMP_TZ(VL_DUE_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_OPERATION_DATE                   := CAST(TO_TIMESTAMP_TZ(VL_OPERATION_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_LOAN_EFFECTIVE_DATE              := CAST(TO_TIMESTAMP_TZ(VL_LOAN_EFFECTIVE_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_SUBTERM_TYPE_ID                  := JSON_VALUE(PA_LOAN_DATA, '$.subTermTypeId');

  SELECT COUNT(*)
    INTO VL_EXISTING_LOAN_COUNT
    FROM SC_CREDIT.TA_LOAN
    WHERE FI_LOAN_ID = VL_LOAN_ID;

  IF VL_EXISTING_LOAN_COUNT > CSG_ZERO THEN
    RAISE EXC_LOAN_ALREADY_EXISTS;
  END IF;

  INSERT INTO SC_CREDIT.TA_LOAN (
    FI_COUNTRY_ID,
    FI_COMPANY_ID,
    FI_BUSINESS_UNIT_ID,
    FI_ADMIN_CENTER_ID,
    FI_LOAN_ID,
    FI_ORIGINATION_CENTER_ID,
    FC_PLATFORM_ID,
    FC_SUB_PLATFORM_ID,
    FC_CUSTOMER_ID,
    FI_PRODUCT_ID,
    FN_PRINCIPAL_AMOUNT,
    FN_FINANCE_CHARGE_AMOUNT,
    FN_PRINCIPAL_BALANCE,
    FN_FINANCE_CHARGE_BALANCE,
    FN_ADDITIONAL_CHARGE_BALANCE,
    FD_ORIGINATION_DATE,
    FD_FIRST_PAYMENT,
    FD_DUE_DATE,
    FN_APR,
    FI_ADDITIONAL_STATUS,
    FI_CURRENT_BALANCE_SEQ,
    FN_INTEREST_RATE,
    FI_NUMBER_OF_PAYMENTS,
    FI_TERM_TYPE,
    FI_LOAN_STATUS_ID,
    FI_ACCRUED_TYPE_ID,
    FI_RULE_ID,
    FC_END_USER,
    FD_OPERATION_DATE,
    FC_UUID_TRACKING,
    FC_IP_ADDRESS,
    FC_DEVICE,
    FC_USER,
    FD_CREATED_DATE,
    FD_MODIFICATION_DATE,
    FI_TRANSACTION,
    FD_LOAN_STATUS_DATE,
    FD_LOAN_EFFECTIVE_DATE,
    FI_SUBTERM_TYPE_ID)
  VALUES (
    VL_COUNTRY_ID,
    VL_COMPANY_ID,
    VL_BUSINESS_UNIT_ID,
    VL_ADMIN_CENTER_ID,
    VL_LOAN_ID,
    VL_ORIGINATION_CENTER_ID,
    VL_PLATFORM_ID,
    VL_SUB_PLATFORM_ID,
    VL_CUSTOMER_ID,
    VL_PRODUCT_ID,
    VL_PRINCIPAL_AMOUNT,
    VL_FINANCE_CHARGE_AMOUNT,
    VL_PRINCIPAL_BALANCE,
    VL_FINANCE_CHARGE_BALANCE,
    VL_ADDITIONAL_CHARGE_BALANCE,
    VL_ORIGINATION_DATE,
    VL_FIRST_PAYMENT,
    VL_DUE_DATE,
    VL_APR,
    CSG_ZERO,
    CSG_ZERO,
    VL_INTEREST_RATE,
    VL_NUMBER_OF_PAYMENTS,
    VL_TERM_TYPE,
    VL_LOAN_STATUS_ID,
    VL_ACCRUED_TYPE_ID,
    VL_RULE_ID,
    VL_END_USER,
    VL_OPERATION_DATE,
    VL_UUID_TRACKING,
    VL_IP_ADDRESS,
    VL_DEVICE,
    CSG_CURRENT_USER,
    CSG_CURRENT_DATE,
    CSG_CURRENT_DATE,
    VL_TRANSACTION,
    CSG_CURRENT_DATE,
    VL_LOAN_EFFECTIVE_DATE,
    VL_SUBTERM_TYPE_ID);

  VL_INSERT_COUNT := SQL%ROWCOUNT;

    IF VL_INSERT_COUNT = CSG_ZERO THEN
    RAISE EXC_DATA_NOT_SAVED;
    END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;
    PA_FINANCE_CHARGE_BALANCE := VL_FINANCE_CHARGE_BALANCE;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN, SQLCODE, SQLERRM,
    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_LOAN_DATA);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN, SQLCODE, SQLERRM,
    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_LOAN_DATA);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
    PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW ||  SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, CSG_X );
    WHEN EXC_LOAN_ALREADY_EXISTS THEN
    ROLLBACK;
    PA_STATUS_CODE := CSL_LOAN_ALREADY_EXISTS_CODE;
    PA_STATUS_MSG := CSL_LOAN_ALREADY_EXISTS_MSG || CSG_ARROW || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_LOAN_DATA);
  WHEN OTHERS THEN
    PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_LOAN_DATA);
  END SP_INS_LOAN;

  PROCEDURE SP_INS_PAYMENT_SCHEDULE (
    PA_PAYMENT_SCHEDULE_DATA IN CLOB,
    PA_STATUS_CODE OUT NUMBER,
    PA_STATUS_MSG OUT VARCHAR2)
  AS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT PAYMENT SCHEDULE
************************************************************** */
  --LOCAL CONSTANS
    CSL_INSERT_PAYMENT       CONSTANT VARCHAR2(50) := 'SP_INS_PAYMENT_SCHEDULE';
  -- EXCEPTIONS
    EXC_DATA_NOT_SAVED           EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
    EXC_FOREING_KEY_VIOLATION EXCEPTION;
    PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
    EX_DUPLICATE_PK EXCEPTION;
    PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
    EXC_DUPLICATE_DATA EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_DUPLICATE_DATA, CSG_DUPLICATE_DATA_CODE);

  TYPE REC_PAYMENT_SCHEDULE_TYPE IS RECORD (
    FI_LOAN_ID                      SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_LOAN_ID%TYPE,
    FI_PAYMENT_NUMBER_ID            SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_PAYMENT_NUMBER_ID%TYPE,
    FI_ADMIN_CENTER_ID              SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_ADMIN_CENTER_ID%TYPE,
    FN_PAYMENT_AMOUNT               SC_CREDIT.TA_PAYMENT_SCHEDULE.FN_PAYMENT_AMOUNT%TYPE,
    FD_DUE_DATE_CHAR                VARCHAR2(30),
    FI_PMT_SCHEDULE_STATUS_ID       SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_PMT_SCHEDULE_STATUS_ID%TYPE,
    FI_PERIOD_DAYS                  SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_PERIOD_DAYS%TYPE,
    FN_INTEREST_AMOUNT              SC_CREDIT.TA_PAYMENT_SCHEDULE.FN_INTEREST_AMOUNT%TYPE,
    FN_PRINCIPAL_PAYMENT_AMOUNT     SC_CREDIT.TA_PAYMENT_SCHEDULE.FN_PRINCIPAL_PAYMENT_AMOUNT%TYPE,
    FN_OUTSTANDING_BALANCE          SC_CREDIT.TA_PAYMENT_SCHEDULE.FN_OUTSTANDING_BALANCE%TYPE);

    VL_PAYMENT_SCHEDULE_DATA        REC_PAYMENT_SCHEDULE_TYPE;
    VL_INSERT_COUNT                 NUMBER(3) := CSG_ZERO;
    VL_NUMBER_OF_PAYMMENTS          SC_CREDIT.TA_LOAN.FI_NUMBER_OF_PAYMENTS%TYPE;
    VL_COUNT_NUMBER_OF_PAYMENTS     NUMBER(3);
    VL_DUE_DATE                     DATE;
  BEGIN
     FOR JSON_REC IN (
    SELECT
      PS.FI_LOAN_ID,
      PS.FI_PAYMENT_NUMBER_ID,
      PS.FI_ADMIN_CENTER_ID,
      PS.FN_PAYMENT_AMOUNT,
      PS.FD_DUE_DATE_CHAR,
      PS.FI_PMT_SCHEDULE_STATUS_ID,
      PS.FI_PERIOD_DAYS,
      PS.FN_INTEREST_AMOUNT,
      PS.FN_PRINCIPAL_PAYMENT_AMOUNT,
      PS.FN_OUTSTANDING_BALANCE
    FROM JSON_TABLE (
      PA_PAYMENT_SCHEDULE_DATA,
      '$[*]'
    COLUMNS (
      FI_LOAN_ID                    NUMBER(15) PATH '$.loanId',
      FI_PAYMENT_NUMBER_ID          NUMBER(3) PATH '$.paymentNumberId',
      FI_ADMIN_CENTER_ID            NUMBER(8) PATH '$.adminCenterId',
      FN_PAYMENT_AMOUNT             NUMBER(12,2) PATH '$.paymentAmount',
      FD_DUE_DATE_CHAR              VARCHAR2(30) PATH '$.dueDate',
      FI_PMT_SCHEDULE_STATUS_ID     NUMBER(3) PATH '$.pmtScheduleStatusId',
      FI_PERIOD_DAYS                NUMBER(3) PATH '$.periodDays',
      FN_INTEREST_AMOUNT            NUMBER(12,2) PATH '$.interestAmount',
      FN_PRINCIPAL_PAYMENT_AMOUNT   NUMBER(12,2) PATH '$.principalPaymentAmount',
      FN_OUTSTANDING_BALANCE        NUMBER(12,2) PATH '$.outstandingBalance'))
    PS)
  LOOP
    VL_PAYMENT_SCHEDULE_DATA.FI_LOAN_ID                     := JSON_REC.FI_LOAN_ID;
    VL_PAYMENT_SCHEDULE_DATA.FI_PAYMENT_NUMBER_ID           := JSON_REC.FI_PAYMENT_NUMBER_ID;
    VL_PAYMENT_SCHEDULE_DATA.FI_ADMIN_CENTER_ID             := JSON_REC.FI_ADMIN_CENTER_ID;
    VL_PAYMENT_SCHEDULE_DATA.FN_PAYMENT_AMOUNT              := JSON_REC.FN_PAYMENT_AMOUNT;
    VL_PAYMENT_SCHEDULE_DATA.FD_DUE_DATE_CHAR               := JSON_REC.FD_DUE_DATE_CHAR;
    VL_PAYMENT_SCHEDULE_DATA.FI_PMT_SCHEDULE_STATUS_ID      := JSON_REC.FI_PMT_SCHEDULE_STATUS_ID;
    VL_DUE_DATE                                             := CAST(TO_TIMESTAMP_TZ(VL_PAYMENT_SCHEDULE_DATA.FD_DUE_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);
    VL_PAYMENT_SCHEDULE_DATA.FI_PERIOD_DAYS                 := JSON_REC.FI_PERIOD_DAYS;
    VL_PAYMENT_SCHEDULE_DATA.FN_INTEREST_AMOUNT             := JSON_REC.FN_INTEREST_AMOUNT;
    VL_PAYMENT_SCHEDULE_DATA.FN_PRINCIPAL_PAYMENT_AMOUNT    := JSON_REC.FN_PRINCIPAL_PAYMENT_AMOUNT;
    VL_PAYMENT_SCHEDULE_DATA.FN_OUTSTANDING_BALANCE         := JSON_REC.FN_OUTSTANDING_BALANCE;

  INSERT INTO SC_CREDIT.TA_PAYMENT_SCHEDULE (
    FI_PAYMENT_SCHEDULE_ID
    ,FI_LOAN_ID
    ,FI_ADMIN_CENTER_ID
    ,FI_PAYMENT_NUMBER_ID
    ,FN_PAYMENT_AMOUNT
    ,FN_PAYMENT_BALANCE
    ,FI_SCHEDULE_TYPE_ID
    ,FD_DUE_DATE
    ,FI_PMT_SCHEDULE_STATUS_ID
    ,FI_STATUS
    ,FC_USER
    ,FD_CREATED_DATE
    ,FD_MODIFICATION_DATE
    ,FI_PERIOD_DAYS
    ,FN_INTEREST_AMOUNT
    ,FN_PRINCIPAL_PAYMENT_AMOUNT
    ,FN_OUTSTANDING_BALANCE)

  VALUES (
    VL_PAYMENT_SCHEDULE_DATA.FI_PAYMENT_NUMBER_ID
    ,VL_PAYMENT_SCHEDULE_DATA.FI_LOAN_ID
    ,VL_PAYMENT_SCHEDULE_DATA.FI_ADMIN_CENTER_ID
    ,VL_PAYMENT_SCHEDULE_DATA.FI_PAYMENT_NUMBER_ID
    ,VL_PAYMENT_SCHEDULE_DATA.FN_PAYMENT_AMOUNT
    ,VL_PAYMENT_SCHEDULE_DATA.FN_PAYMENT_AMOUNT
    ,CSG_ONE
    ,VL_DUE_DATE
    ,VL_PAYMENT_SCHEDULE_DATA.FI_PMT_SCHEDULE_STATUS_ID
    ,CSG_ONE
    ,CSG_CURRENT_USER
    ,CSG_CURRENT_DATE
    ,CSG_CURRENT_DATE
    ,VL_PAYMENT_SCHEDULE_DATA.FI_PERIOD_DAYS
    ,VL_PAYMENT_SCHEDULE_DATA.FN_INTEREST_AMOUNT
    ,VL_PAYMENT_SCHEDULE_DATA.FN_PRINCIPAL_PAYMENT_AMOUNT
    ,VL_PAYMENT_SCHEDULE_DATA.FN_OUTSTANDING_BALANCE);

    VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
  END LOOP;

    SELECT COUNT(CSG_ONE)
    INTO VL_COUNT_NUMBER_OF_PAYMENTS FROM SC_CREDIT.TA_LOAN WHERE FI_LOAN_ID = VL_PAYMENT_SCHEDULE_DATA.FI_LOAN_ID
    AND FI_ADMIN_CENTER_ID = VL_PAYMENT_SCHEDULE_DATA.FI_ADMIN_CENTER_ID;

    IF VL_COUNT_NUMBER_OF_PAYMENTS > CSG_ONE THEN
        RAISE EXC_DUPLICATE_DATA;
    END IF;

    SELECT  FI_NUMBER_OF_PAYMENTS
    INTO VL_NUMBER_OF_PAYMMENTS FROM SC_CREDIT.TA_LOAN WHERE FI_LOAN_ID = VL_PAYMENT_SCHEDULE_DATA.FI_LOAN_ID
    AND FI_ADMIN_CENTER_ID = VL_PAYMENT_SCHEDULE_DATA.FI_ADMIN_CENTER_ID;

  IF VL_INSERT_COUNT <> VL_NUMBER_OF_PAYMMENTS THEN
    RAISE EXC_DATA_NOT_SAVED;
  END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT, SQLCODE, SQLERRM,
    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_DATA);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT, SQLCODE, SQLERRM,
    DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_DATA);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
    PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_DATA );
    WHEN EXC_DUPLICATE_DATA THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_DUPLICATE_DATA_CODE;
    PA_STATUS_MSG := CSG_DUPLICATE_DATA_MSG || CSG_ARROW || SQLERRM ||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_DATA);
    WHEN OTHERS THEN
    PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_DATA);
    ROLLBACK;
  END SP_INS_PAYMENT_SCHEDULE;

  PROCEDURE SP_INS_LOAN_OPERATION(
    PA_DATA_LOAN_OPERATION    IN CLOB
    ,PA_LOAN_OPERATION_ID     IN NUMBER
    ,PA_STATUS_CODE           OUT NUMBER
    ,PA_STATUS_MSG            OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT LOAN OPERATION
************************************************************** */
    --LOCAL CONSTANS
    CSL_INSERT_OPERATION     CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_OPERATION';
      -- VARIABLES
  VL_COUNTRY_ID             NUMBER(3);
  VL_COMPANY_ID             NUMBER(3);
  VL_BUSINESS_UNIT_ID       NUMBER(5);
  VL_LOAN_ID                NUMBER(15);
  VL_ADMIN_CENTER_ID        NUMBER(8);
  VL_OPERATION_TYPE_ID      NUMBER(5);
  VL_TRANSACTION            NUMBER(33);
  VL_PLATFORM_ID            VARCHAR2(6);
  VL_SUB_PLATFORM_ID        VARCHAR2(6);
  VL_OPERATION_AMOUNT       NUMBER(12,2);
  VL_APPLICATION_DATE_CHAR  VARCHAR2(30);
  VL_APPLICATION_DATE       DATE;
  VL_END_USER               VARCHAR2(10);
  VL_UUID_TRACKING          VARCHAR2(36);
  VL_GPS_LATITUDE           VARCHAR2(15);
  VL_GPS_LONGITUDE          VARCHAR2(15);
  VL_IP_ADDRESS             VARCHAR2(39);
  VL_DEVICE                 VARCHAR2(50);
   -- EXCEPTIONS
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  BEGIN
    VL_COUNTRY_ID               := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.countryId');
    VL_COMPANY_ID               := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.companyId');
    VL_BUSINESS_UNIT_ID         := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.businessUnitId');
    VL_LOAN_ID                  := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.loanId');
    VL_ADMIN_CENTER_ID          := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.adminCenterId');
    VL_OPERATION_TYPE_ID        := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.operationTypeId');
    VL_TRANSACTION              := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.transaction');
    VL_PLATFORM_ID              := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.platformId');
    VL_SUB_PLATFORM_ID          := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.subPlatformId');
    VL_OPERATION_AMOUNT         := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.operationAmount');
    VL_APPLICATION_DATE_CHAR    := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.applicationDate');
    VL_END_USER                 := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.endUser');
    VL_UUID_TRACKING            := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.uuidTracking');
    VL_GPS_LATITUDE             := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.gpsLatitude');
    VL_GPS_LONGITUDE            := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.gpsLongitude');
    VL_IP_ADDRESS               := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.ipAddress');
    VL_DEVICE                   := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.device');
    VL_APPLICATION_DATE         := CAST(TO_TIMESTAMP_TZ(VL_APPLICATION_DATE_CHAR, CSG_FORMAT_DATE) AS DATE);

      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION (
        FI_LOAN_OPERATION_ID,
        FI_COUNTRY_ID,
        FI_COMPANY_ID,
        FI_BUSINESS_UNIT_ID,
        FI_LOAN_ID,
        FI_ADMIN_CENTER_ID,
        FI_OPERATION_TYPE_ID,
        FI_TRANSACTION,
        FC_PLATFORM_ID,
        FC_SUB_PLATFORM_ID,
        FN_OPERATION_AMOUNT,
        FD_APPLICATION_DATE,
        FD_OPERATION_DATE,
        FI_STATUS,
        FC_END_USER,
        FC_UUID_TRACKING,
        FC_GPS_LATITUDE,
        FC_GPS_LONGITUDE,
        FC_IP_ADDRESS,
        FC_DEVICE,
        FC_USER,
        FD_CREATED_DATE,
        FD_MODIFICATION_DATE)
      VALUES (
        PA_LOAN_OPERATION_ID
        ,VL_COUNTRY_ID
        ,VL_COMPANY_ID
        ,VL_BUSINESS_UNIT_ID
        ,VL_LOAN_ID
        ,VL_ADMIN_CENTER_ID
        ,VL_OPERATION_TYPE_ID
        ,VL_TRANSACTION
        ,VL_PLATFORM_ID
        ,VL_SUB_PLATFORM_ID
        ,VL_OPERATION_AMOUNT
        ,VL_APPLICATION_DATE
        ,CSG_CURRENT_DATE
        ,CSG_ONE
        ,VL_END_USER
        ,VL_UUID_TRACKING
        ,VL_GPS_LATITUDE
        ,VL_GPS_LONGITUDE
        ,VL_IP_ADDRESS
        ,VL_DEVICE
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
  END SP_INS_LOAN_OPERATION;

  PROCEDURE SP_INS_LOAN_OPERATION_DETAIL (
    PA_DATA_LOAN_OPERATION_DETAIL               IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT OPERATION DETAIL
************************************************************** */
    -- LOCAL CONSTANTS
    CSL_INSERT_OPERATION_DETAIL CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_OPERATION_DETAIL';
    -- EXCEPTIONS
  EXC_DATA_NOT_SAVED EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  TYPE REC_LOAN_OPERATION_DETAIL_TYPE IS RECORD (
    FI_LOAN_ID  SC_CREDIT.TA_LOAN.FI_LOAN_ID%TYPE
    ,FI_ADMIN_CENTER_ID  SC_CREDIT.TA_LOAN_OPERATION_DETAIL.FI_ADMIN_CENTER_ID%TYPE
    ,FI_LOAN_CONCEPT_ID SC_CREDIT.TA_LOAN_OPERATION_DETAIL.FI_LOAN_CONCEPT_ID%TYPE
    ,FN_ITEM_AMOUNT     SC_CREDIT.TA_LOAN_OPERATION_DETAIL.FN_ITEM_AMOUNT%TYPE);

    VL_LOAN_OPERATION_DETAIL_DATA REC_LOAN_OPERATION_DETAIL_TYPE;
    VL_INSERT_COUNT               NUMBER(3) := CSG_ZERO;

  BEGIN
    FOR JSON_REC IN (
      SELECT
        OD.FI_LOAN_ID
        ,OD.FI_ADMIN_CENTER_ID
        ,OD.FI_LOAN_CONCEPT_ID
        ,OD.FN_ITEM_AMOUNT
      FROM JSON_TABLE(
        PA_DATA_LOAN_OPERATION_DETAIL
        ,'$[*]'
      COLUMNS (
        FI_LOAN_ID NUMBER (15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID NUMBER(8) PATH '$.adminCenterId'
        ,FI_LOAN_CONCEPT_ID  NUMBER(5) PATH '$.loanConceptId'
        ,FN_ITEM_AMOUNT     NUMBER(12,2) PATH '$.itemAmount'))
        OD)
      LOOP
        VL_LOAN_OPERATION_DETAIL_DATA.FI_LOAN_ID           :=   JSON_REC.FI_LOAN_ID;
        VL_LOAN_OPERATION_DETAIL_DATA.FI_ADMIN_CENTER_ID   := JSON_REC.FI_ADMIN_CENTER_ID;
        VL_LOAN_OPERATION_DETAIL_DATA.FI_LOAN_CONCEPT_ID  := JSON_REC.FI_LOAN_CONCEPT_ID;
        VL_LOAN_OPERATION_DETAIL_DATA.FN_ITEM_AMOUNT      := JSON_REC.FN_ITEM_AMOUNT;

      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION_DETAIL (
        FI_LOAN_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_CONCEPT_ID
        ,FN_ITEM_AMOUNT
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        VL_LOAN_OPERATION_DETAIL_DATA.FI_LOAN_ID
        ,PA_LOAN_OPERATION_ID
        ,VL_LOAN_OPERATION_DETAIL_DATA.FI_ADMIN_CENTER_ID
        ,VL_LOAN_OPERATION_DETAIL_DATA.FI_LOAN_CONCEPT_ID
        ,VL_LOAN_OPERATION_DETAIL_DATA.FN_ITEM_AMOUNT
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
       ,CSG_CURRENT_DATE);

        VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
      END LOOP;

      IF VL_INSERT_COUNT = CSG_ZERO THEN
        RAISE EXC_DATA_NOT_SAVED;
      END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
      CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
      CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
      PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
        CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);

  END SP_INS_LOAN_OPERATION_DETAIL;

  PROCEDURE SP_INS_LOAN_BALANCE (
    PA_DATA_LOAN_BALANCE   IN CLOB
    ,PA_LOAN_BALANCE_ID    IN NUMBER
    ,PA_LOAN_OPERATION_ID  IN NUMBER
    ,PA_STATUS_CODE        OUT NUMBER
    ,PA_STATUS_MSG         OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT LOAN BALANCE
************************************************************** */
    -- LOCAL CONSTANTS
    CSL_INSERT_BALANCE       CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_BALANCE';
    -- VARIABLES
    VL_ADMIN_CENTER_ID            NUMBER(8);
    VL_LOAN_ID                    NUMBER(15);
    VL_PRINCIPAL_BALANCE          NUMBER(12,2);
    VL_FINANCE_CHARGE_BALANCE     NUMBER(12,2);
    VL_ADDITIONAL_CHARGE_BALANCE  NUMBER(12,2);
    VL_INSERT_ROWS                NUMBER(3);
  --EXCEPCION
  EXC_DATA_NOT_SAVED EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  BEGIN
        VL_ADMIN_CENTER_ID              := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.adminCenterId');
        VL_LOAN_ID                      := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.loanId');
        VL_PRINCIPAL_BALANCE            := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.principalBalance');
        VL_FINANCE_CHARGE_BALANCE       := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.financeChargeBalance');
        VL_ADDITIONAL_CHARGE_BALANCE    := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.additionalChargeBalance');

      INSERT INTO SC_CREDIT.TA_LOAN_BALANCE (
        FI_LOAN_BALANCE_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_BALANCE_SEQ
        ,FN_PRINCIPAL_BALANCE
        ,FN_FINANCE_CHARGE_BALANCE
        ,FN_ADDITIONAL_CHARGE_BALANCE
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        PA_LOAN_BALANCE_ID
        ,VL_ADMIN_CENTER_ID
        ,VL_LOAN_ID
        ,PA_LOAN_OPERATION_ID
        ,CSG_ONE
        ,VL_PRINCIPAL_BALANCE
        ,VL_FINANCE_CHARGE_BALANCE
        ,VL_ADDITIONAL_CHARGE_BALANCE
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

       VL_INSERT_ROWS := SQL%ROWCOUNT;
       IF VL_INSERT_ROWS = CSG_ZERO THEN
        RAISE EXC_DATA_NOT_SAVED;
       END IF;

    UPDATE SC_CREDIT.TA_LOAN SET FI_CURRENT_BALANCE_SEQ = CSG_ONE WHERE FI_LOAN_ID = VL_LOAN_ID
    AND FI_ADMIN_CENTER_ID = VL_ADMIN_CENTER_ID;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
      PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
  END SP_INS_LOAN_BALANCE;

  PROCEDURE SP_INS_LOAN_BALANCE_DETAIL (
    PA_DATA_LOAN_BALANCE_DETAIL               IN CLOB
    ,PA_LOAN_BALANCE_ID   IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT LOAN BALANCE DETAIL
************************************************************** */
    -- LOCAL CONSTANTS
    CSL_INSERT_BALANCE_DETAIL   CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_BALANCE_DETAIL';
    -- EXCEPTIONS
  EXC_DATA_NOT_SAVED EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
    -- TYPES
  TYPE REC_LOAN_BALANCE_DETAIL_TYPE IS RECORD (
    FI_LOAN_ID  SC_CREDIT.TA_LOAN.FI_LOAN_ID%TYPE
    ,FI_ADMIN_CENTER_ID    SC_CREDIT.TA_LOAN_BALANCE_DETAIL.FI_ADMIN_CENTER_ID%TYPE
    ,FI_LOAN_CONCEPT_ID   SC_CREDIT.TA_LOAN_BALANCE_DETAIL.FI_LOAN_CONCEPT_ID%TYPE
    ,FN_ITEM_AMOUNT       SC_CREDIT.TA_LOAN_BALANCE_DETAIL.FN_ITEM_AMOUNT%TYPE);

    VL_LOAN_BALANCE_DETAIL_DATA REC_LOAN_BALANCE_DETAIL_TYPE;
    VL_INSERT_COUNT      NUMBER(3) := CSG_ZERO;

  BEGIN
    FOR JSON_REC IN (
      SELECT
        BD.FI_LOAN_ID
        ,BD.FI_ADMIN_CENTER_ID
        ,BD.FI_LOAN_CONCEPT_ID
        ,BD.FN_ITEM_AMOUNT
      FROM JSON_TABLE(
        PA_DATA_LOAN_BALANCE_DETAIL
        ,'$[*]'
      COLUMNS (
        FI_LOAN_ID             NUMBER(15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID    NUMBER(8) PATH '$.adminCenterId'
        ,FI_LOAN_CONCEPT_ID   NUMBER(5) PATH '$.loanConceptId'
        ,FN_ITEM_AMOUNT       NUMBER(12,2) PATH '$.itemAmount'))
        BD)
      LOOP
      VL_LOAN_BALANCE_DETAIL_DATA.FI_LOAN_ID            := JSON_REC.FI_LOAN_ID;
        VL_LOAN_BALANCE_DETAIL_DATA.FI_ADMIN_CENTER_ID  := JSON_REC.FI_ADMIN_CENTER_ID;
        VL_LOAN_BALANCE_DETAIL_DATA.FI_LOAN_CONCEPT_ID  := JSON_REC.FI_LOAN_CONCEPT_ID;
        VL_LOAN_BALANCE_DETAIL_DATA.FN_ITEM_AMOUNT      := JSON_REC.FN_ITEM_AMOUNT;

      INSERT INTO SC_CREDIT.TA_LOAN_BALANCE_DETAIL (
        FI_LOAN_ID
        ,FI_LOAN_BALANCE_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_CONCEPT_ID
        ,FN_ITEM_AMOUNT
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        VL_LOAN_BALANCE_DETAIL_DATA.FI_LOAN_ID
        ,PA_LOAN_BALANCE_ID
        ,VL_LOAN_BALANCE_DETAIL_DATA.FI_ADMIN_CENTER_ID
        ,VL_LOAN_BALANCE_DETAIL_DATA.FI_LOAN_CONCEPT_ID
        ,VL_LOAN_BALANCE_DETAIL_DATA.FN_ITEM_AMOUNT
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

        VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
      END LOOP;

      IF VL_INSERT_COUNT = CSG_ZERO THEN
        RAISE EXC_DATA_NOT_SAVED;
      END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
      PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
  END SP_INS_LOAN_BALANCE_DETAIL;

  PROCEDURE SP_INS_PAYMENT_SCHEDULE_FEE (
    PA_PAYMENT_SCHEDULE_FEE_DATA    IN CLOB,
    PA_STATUS_CODE                  OUT NUMBER,
    PA_STATUS_MSG                   OUT VARCHAR2)
  AS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE TO INSERT PAYMENT SCHEDULE FEE
************************************************************** */
  --LOCAL CONSTANS
    CSL_INSERT_PAYMENT_FEE       CONSTANT VARCHAR2(50) := 'SP_INS_PAYMENT_SCHEDULE_FEE';
  -- EXCEPTIONS
    EXC_DATA_NOT_SAVED           EXCEPTION;
    PRAGMA EXCEPTION_INIT (EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);

  TYPE REC_PAYMENT_SCHEDULE_FEE_TYPE IS RECORD (
    FI_PAYMENT_SCHEDULE_ID          SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FI_PAYMENT_SCHEDULE_ID%TYPE,
    FI_LOAN_ID                      SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FI_LOAN_ID%TYPE,
    FI_ADMIN_CENTER_ID              SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FI_ADMIN_CENTER_ID%TYPE,
    FI_LOAN_CONCEPT_ID              SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FI_LOAN_CONCEPT_ID%TYPE,
    FN_FEE_AMOUNT                   SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FN_FEE_AMOUNT%TYPE,
    FN_FEE_PAYMENT_BALANCE          SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE.FN_FEE_PAYMENT_BALANCE%TYPE);

    VL_PAYMENT_SCHEDULE_FEE_DATA    REC_PAYMENT_SCHEDULE_FEE_TYPE;
    VL_FEE_SEQ                      NUMBER(3);

  BEGIN
     FOR JSON_REC IN (
    SELECT
      PSF.FI_PAYMENT_SCHEDULE_ID,
      PSF.FI_LOAN_ID,
      PSF.FI_ADMIN_CENTER_ID,
      PSF.FI_LOAN_CONCEPT_ID,
      PSF.FN_FEE_AMOUNT,
      PSF.FN_FEE_PAYMENT_BALANCE
    FROM JSON_TABLE (
      PA_PAYMENT_SCHEDULE_FEE_DATA,
      '$[*]'
    COLUMNS (
      FI_PAYMENT_SCHEDULE_ID    NUMBER(3) PATH '$.paymentScheduleId',
      FI_LOAN_ID                NUMBER(15) PATH '$.loanId',
      FI_ADMIN_CENTER_ID        NUMBER(8) PATH '$.adminCenterId',
      FI_LOAN_CONCEPT_ID        NUMBER(3) PATH '$.loanConceptId',
      FN_FEE_AMOUNT             NUMBER(12,2) PATH '$.feeAmount',
      FN_FEE_PAYMENT_BALANCE    NUMBER(12,2) PATH '$.feePaymentBalance'))
    PSF)
  LOOP
    VL_PAYMENT_SCHEDULE_FEE_DATA.FI_PAYMENT_SCHEDULE_ID     := JSON_REC.FI_PAYMENT_SCHEDULE_ID;
    VL_PAYMENT_SCHEDULE_FEE_DATA.FI_LOAN_ID                 := JSON_REC.FI_LOAN_ID;
    VL_PAYMENT_SCHEDULE_FEE_DATA.FI_ADMIN_CENTER_ID         := JSON_REC.FI_ADMIN_CENTER_ID;
    VL_PAYMENT_SCHEDULE_FEE_DATA.FI_LOAN_CONCEPT_ID         := JSON_REC.FI_LOAN_CONCEPT_ID;
    VL_PAYMENT_SCHEDULE_FEE_DATA.FN_FEE_AMOUNT              := JSON_REC.FN_FEE_AMOUNT;
    VL_PAYMENT_SCHEDULE_FEE_DATA.FN_FEE_PAYMENT_BALANCE     := JSON_REC.FN_FEE_PAYMENT_BALANCE;

  SELECT NVL(MAX(FI_FEE_SEQ), CSG_ZERO) + CSG_ONE
    INTO VL_FEE_SEQ
    FROM SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE
    WHERE FI_PAYMENT_SCHEDULE_ID = JSON_REC.FI_PAYMENT_SCHEDULE_ID
    AND FI_LOAN_ID = JSON_REC.FI_LOAN_ID
    AND FI_ADMIN_CENTER_ID = JSON_REC.FI_ADMIN_CENTER_ID;

  INSERT INTO SC_CREDIT.TA_PAYMENT_SCHEDULE_FEE (
    FI_PAYMENT_SCHEDULE_ID
    ,FI_FEE_SEQ
    ,FI_LOAN_ID
    ,FI_ADMIN_CENTER_ID
    ,FI_LOAN_CONCEPT_ID
    ,FN_FEE_AMOUNT
    ,FN_FEE_PAYMENT_BALANCE
    ,FC_USER
    ,FD_CREATED_DATE
    ,FD_MODIFICATION_DATE)

  VALUES (
    VL_PAYMENT_SCHEDULE_FEE_DATA.FI_PAYMENT_SCHEDULE_ID
    ,VL_FEE_SEQ
    ,VL_PAYMENT_SCHEDULE_FEE_DATA.FI_LOAN_ID
    ,VL_PAYMENT_SCHEDULE_FEE_DATA.FI_ADMIN_CENTER_ID
    ,VL_PAYMENT_SCHEDULE_FEE_DATA.FI_LOAN_CONCEPT_ID
    ,VL_PAYMENT_SCHEDULE_FEE_DATA.FN_FEE_AMOUNT
    ,VL_PAYMENT_SCHEDULE_FEE_DATA.FN_FEE_PAYMENT_BALANCE
    ,CSG_CURRENT_USER
    ,CSG_CURRENT_DATE
    ,CSG_CURRENT_DATE);
  END LOOP;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;

  EXCEPTION
    WHEN OTHERS THEN
    PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_PAYMENT_FEE, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_PAYMENT_SCHEDULE_FEE_DATA);
    ROLLBACK;
  END SP_INS_PAYMENT_SCHEDULE_FEE;
END PA_EXE_LOAN_ORIGINATION;

/


GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_ORIGINATION TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_ORIGINATION TO USRPURPOSEWS
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_ORIGINATION TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_ORIGINATION TO USRPURPOSEWS
/
