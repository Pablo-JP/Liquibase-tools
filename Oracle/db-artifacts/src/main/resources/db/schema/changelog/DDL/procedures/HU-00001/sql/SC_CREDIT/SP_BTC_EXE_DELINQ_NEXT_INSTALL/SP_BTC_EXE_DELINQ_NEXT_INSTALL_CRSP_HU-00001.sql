CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_EXE_DELINQ_NEXT_INSTALL (
    PTAB_STATUS_DETAIL          IN SC_CREDIT.TYP_TAB_BTC_STATUS_DETAIL
   ,PA_STATUS_CODE              OUT NUMBER
   ,PA_STATUS_MSG               OUT VARCHAR2
   ,PA_RECORDS_READ             OUT NUMBER
   ,PA_RECORDS_SUCCESS          OUT NUMBER
   ,PA_RECORDS_ERROR            OUT NUMBER
   ,PTAB_ERROR_RECORDS          OUT SC_CREDIT.TYP_TAB_BTC_ERROR
)
IS

   /* **************************************************************
   * PROJECT: LOAN LIFE CYCLE
   * DESCRIPTION: V1 - PROCESS TO APPLY NEXT INSTALLMENTE IN DELONQUENT
   * CREATED DATE: 17/12/2024
   * CREATOR: IVAN lOPEZ
   * MODIFICATION DATE:
   * PERFORMANCE MODIFICATIONS :
   ************************************************************** */

   --CONSTANTS
   CSL_0                              CONSTANT SIMPLE_INTEGER := 0;
   CSL_1                              CONSTANT SIMPLE_INTEGER := 1;
   CSL_SP                             CONSTANT SIMPLE_INTEGER := 1;

   --CONSTANTS SUCCESS
   CSL_SUCCESS_CODE                   CONSTANT SIMPLE_INTEGER := 0;
   CSL_SUCCESS_MSG                    CONSTANT VARCHAR2(7) := 'SUCCESS';
   CSL_CODE_ERROR                     CONSTANT SIMPLE_INTEGER := -20012;
   CSL_SPACE                          CONSTANT VARCHAR2(2) := ' ';
   CSL_SUCCESS_ERROR                  CONSTANT VARCHAR2(28) := 'SUCCESS, WITH ERRORS RECORDS';
   CSL_TYPE_NULL                      CONSTANT VARCHAR2(15) := 'TYPE FEES NULL';
   CSL_ARROW                          CONSTANT VARCHAR2(5) := ' -> ';
   CSL_COMMA                          CONSTANT VARCHAR2(5) := ' , ';
   CSL_INS_STATUS_DETAIL              CONSTANT VARCHAR2(30) := 'SP_BTC_INS_LOAN_STATUS_DETAIL';
   CSL_EXE_OPERATION                  CONSTANT VARCHAR2(30) := 'SP_BTC_EXE_OPERATION_BALANCE';
   CSL_INS_LOAN_STATUS                CONSTANT VARCHAR2(30) := 'SP_BTC_INS_LOAN_STATUS';
   VL_I                               NUMBER(10,0) := 0;
   VL_STATUS_CODE                     NUMBER(10,0) := 0;
   VL_STATUS_MSG                      VARCHAR2(1000);

   --VARIABLES INTERNAL TYPES ASSIGNMENT
   VLTAB_ERRORS                       SC_CREDIT.TYP_TAB_BTC_ERROR;

   t1 timestamp;--TODO QUITAR
   t2 timestamp;--TODO QUITAR
   VL_DESC_COUNT                     VARCHAR2(500);

BEGIN
   PA_STATUS_CODE := CSL_SUCCESS_CODE;
   PA_STATUS_MSG := CSL_SUCCESS_MSG;
   PA_RECORDS_SUCCESS := CSL_0;
   PA_RECORDS_ERROR := CSL_0;
   PA_RECORDS_READ := CSL_0;
   VLTAB_ERRORS := SC_CREDIT.TYP_TAB_BTC_ERROR();

 IF PTAB_STATUS_DETAIL IS NULL THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_TYPE_NULL);
   END IF;

   VL_I := PTAB_STATUS_DETAIL.FIRST;
   PA_RECORDS_READ := PTAB_STATUS_DETAIL.COUNT;

   WHILE (VL_I IS NOT NULL) LOOP
      BEGIN

         SC_CREDIT.SP_BTC_INS_LOAN_STATUS_DETAIL
            (PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID
            ,PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
            ,PTAB_STATUS_DETAIL(VL_I).FI_LOAN_STATUS_ID
            ,PTAB_STATUS_DETAIL(VL_I).FI_ACTION_DETAIL_ID
            ,PTAB_STATUS_DETAIL(VL_I).FI_COUNTER_DAY
            ,PTAB_STATUS_DETAIL(VL_I).FD_INITIAL_DATE
            ,PTAB_STATUS_DETAIL(VL_I).FI_PAYMENT_NUMBER_ID
            ,PTAB_STATUS_DETAIL(VL_I).FD_FINAL_DATE
            ,PTAB_STATUS_DETAIL(VL_I).FI_ON_OFF
            ,CSL_0
            ,VL_STATUS_CODE
            ,VL_STATUS_MSG);

         IF(VL_STATUS_CODE != CSL_0)THEN
            RAISE_APPLICATION_ERROR( CSL_CODE_ERROR, CSL_INS_STATUS_DETAIL || CSL_SPACE || VL_STATUS_MSG);
         END IF;

       PA_RECORDS_SUCCESS := PA_RECORDS_SUCCESS + CSL_1;

      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK;
            SC_CREDIT.SP_BATCH_ERROR_LOG(
               UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
               ,SQLCODE
               ,SQLERRM
               ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
               ,CSL_0
               ,PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
                  ||CSL_COMMA
                  ||PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID);
            PA_RECORDS_ERROR :=PA_RECORDS_ERROR + CSL_1;

            VLTAB_ERRORS.EXTEND;
            VLTAB_ERRORS(VLTAB_ERRORS.LAST) :=
               SC_CREDIT.TYP_REC_BTC_ERROR(PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
                                          ,PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID
                                          , UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
                                          ,SQLCODE
                                          ,SQLERRM
                                          ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                          ,SYSDATE
                                          ,CSL_0
                                          ,NULL);
      END;
      VL_I := PTAB_STATUS_DETAIL.NEXT(VL_I);
      COMMIT;
   END LOOP;

   COMMIT;

   PTAB_ERROR_RECORDS := VLTAB_ERRORS;
   IF(PA_RECORDS_ERROR > CSL_0)THEN
      PA_STATUS_CODE := CSL_1;
      PA_STATUS_MSG := CSL_SUCCESS_ERROR;
   END IF;

   PA_STATUS_MSG := PA_STATUS_MSG
      || ' ' || 'Elapsed Seconds: '||TO_CHAR(t2-t1, 'SSSS.FF')
      || ' ' || VL_DESC_COUNT;--TODO QUITAR

EXCEPTION
   WHEN OTHERS THEN
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
                                  ,SQLCODE
                                  ,SQLERRM
                                  ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,CSL_0
                                  ,NULL);
END SP_BTC_EXE_DELINQ_NEXT_INSTALL;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_EXE_DELINQ_NEXT_INSTALL TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_EXE_DELINQ_NEXT_INSTALL TO USRBTCCREDIT1
/
