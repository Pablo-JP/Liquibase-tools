CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_INS_ERROR_LOG (
    PTAB_ERRORS                IN SC_CREDIT.TYP_TAB_BTC_ERROR
   ,PA_STATUS_CODE            OUT NUMBER
   ,PA_STATUS_MSG             OUT VARCHAR2
   ,PA_RECORDS_READ           OUT NUMBER
   ,PA_RECORDS_SUCCESS        OUT NUMBER
   ,PA_RECORDS_ERROR          OUT NUMBER)
IS
   /* **************************************************************
   * PROJECT: PURPOSE CORE LLC
   * DESCRIPTION: INSERT ERRORS OCCURRED IN BATCH
   * CREATED DATE: 05/11/2024
   * CREATOR: LUIS RAMIREZ
   ************************************************************** */

   CSL_0                    CONSTANT SIMPLE_INTEGER := 0;
   CSL_1                    CONSTANT SIMPLE_INTEGER := 1;
   CSL_80                   CONSTANT SIMPLE_INTEGER := 80;
   CSL_500                  CONSTANT SIMPLE_INTEGER := 500;
   CSL_600                  CONSTANT SIMPLE_INTEGER := 600;
   CSL_1000                 CONSTANT SIMPLE_INTEGER := 1000;
   CSL_SP                   CONSTANT SIMPLE_INTEGER := 1;

   --CONSTANTS SUCCESS
   CSL_SUCCESS_CODE         CONSTANT SIMPLE_INTEGER := 0;
   CSL_SUCCESS_ERROR_CODE   CONSTANT SIMPLE_INTEGER := 1;
   CSL_SUCCESS_MSG          CONSTANT VARCHAR2(10) := 'SUCCESS';
   CSL_SUCCESS_ERROR_MSG    CONSTANT VARCHAR2(35) := 'SUCCESS, WITH ERRORS RECORDS';
   CSL_ARROW                CONSTANT VARCHAR2(5) := '->';
   CSL_DATE_FORMAT          CONSTANT VARCHAR2(40) := 'MM/DD/YYYY hh24:mi:ss';

   EXC_BULK_ERRORS EXCEPTION;
   PRAGMA EXCEPTION_INIT(EXC_BULK_ERRORS, -24381); -- CODE ERROR FOR SAVE EXCEPTIONS

BEGIN
   --INITIALIZATION
   PA_STATUS_CODE := CSL_SUCCESS_CODE;
   PA_STATUS_MSG := CSL_SUCCESS_MSG;
   PA_RECORDS_SUCCESS := CSL_0;
   PA_RECORDS_ERROR := CSL_0;

   PA_RECORDS_READ := PTAB_ERRORS.COUNT;

   BEGIN
      FORALL VL_I IN INDICES OF PTAB_ERRORS SAVE EXCEPTIONS
         INSERT INTO SC_CREDIT.TA_BATCH_ERROR_LOG(
               FI_LOG_ID
               , FD_ERROR
               , FC_PROCESS
               , FI_SQL_CODE
               , FC_SQL_ERRM
               , FC_BACKTRACE
               , FI_TRANSACTION
               , FC_ADITIONAL
               , FC_USER
               , FD_CREATED_DATE
               , FD_MODIFICATION_DATE
            )VALUES (
                     SC_CREDIT.SE_BATCH_ERROR_LOG.NEXTVAL
                     ,TO_DATE(PTAB_ERRORS(VL_I).FD_ERROR,CSL_DATE_FORMAT)
                     ,SUBSTR(PTAB_ERRORS(VL_I).FC_PROCESS, CSL_1, CSL_80)
                     ,PTAB_ERRORS(VL_I).FI_SQL_CODE
                     ,SUBSTR(PTAB_ERRORS(VL_I).FC_SQL_ERRM, CSL_1, CSL_1000)
                     ,SUBSTR(PTAB_ERRORS(VL_I).FC_BACKTRACE, CSL_1, CSL_600)
                     ,PTAB_ERRORS(VL_I).FI_TRANSACTION
                     ,SUBSTR(PTAB_ERRORS(VL_I).FC_ADITIONAL, CSL_1, CSL_500)
                     ,USER
                     ,SYSDATE
                     ,SYSDATE
                     );
         COMMIT;

   EXCEPTION
      WHEN EXC_BULK_ERRORS THEN
         PA_RECORDS_ERROR := PA_RECORDS_ERROR + SQL%BULK_EXCEPTIONS.COUNT;
   END;
   COMMIT;

   IF PA_RECORDS_ERROR > CSL_0 THEN
      PA_STATUS_CODE := CSL_SUCCESS_ERROR_CODE;
      PA_STATUS_MSG := CSL_SUCCESS_ERROR_MSG;
   END IF;

EXCEPTION
   WHEN OTHERS THEN
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(
         UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
         ,SQLCODE
         ,SQLERRM
         ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
         ,0
         ,NULL
         );
END SP_BTC_INS_ERROR_LOG;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_INS_ERROR_LOG TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_INS_ERROR_LOG TO USRBTCCREDIT1
/
