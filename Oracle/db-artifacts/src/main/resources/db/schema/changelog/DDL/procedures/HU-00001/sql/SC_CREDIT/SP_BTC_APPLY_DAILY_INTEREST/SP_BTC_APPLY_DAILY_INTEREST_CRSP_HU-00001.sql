CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_APPLY_DAILY_INTEREST 
   (PTAB_INTEREST                  IN SC_CREDIT.TYP_TAB_BTC_INTEREST
   ,PTAB_LOANS                     IN SC_CREDIT.TYP_TAB_BTC_LOAN
   ,PTAB_OPERATIONS                IN SC_CREDIT.TYP_TAB_BTC_OPERATION
   ,PTAB_OPERATIONS_DETAIL         IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PTAB_BALANCES                  IN SC_CREDIT.TYP_TAB_BTC_BALANCE
   ,PTAB_BALANCES_DETAIL           IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PA_DEVICE                      IN SC_CREDIT.TA_LOAN_OPERATION.FC_DEVICE%TYPE
   ,PA_GPS_LATITUDE                IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LATITUDE%TYPE
   ,PA_GPS_LONGITUDE               IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LONGITUDE%TYPE
   ,PA_STATUS_CODE                 OUT NUMBER
   ,PA_STATUS_MSG                  OUT VARCHAR2
   ,PA_RECORDS_READ                OUT NUMBER
   ,PA_RECORDS_SUCCESS             OUT NUMBER
   ,PA_RECORDS_ERROR               OUT NUMBER
   ,PTAB_ERROR_RECORDS             OUT SC_CREDIT.TYP_TAB_BTC_ERROR)
IS

   /* **************************************************************
   * PROJECT: LOAN LIFE CYCLE
   * DESCRIPTION: V3 - PROCESS TO APPLY DAILY INTEREST
   * CREATED DATE: 24/10/2024
   * CREATOR: EDUARDO CERVANTES HERNANDEZ
   * MODIFICATION DATE: 12/12/2024
   * PERFORMANCE MODIFICATIONS - LUIS RAMIREZ
   ************************************************************** */

   --CONSTANTS
   CSL_0                              CONSTANT SIMPLE_INTEGER := 0;
   CSL_1                              CONSTANT SIMPLE_INTEGER := 1;
   CSL_SP                             CONSTANT SIMPLE_INTEGER := 1;

   --CONSTANTS SUCCESS
   CSL_SUCCESS_CODE                   CONSTANT SIMPLE_INTEGER := 0;
   CSL_SUCCESS_MSG                    CONSTANT VARCHAR2(7) := 'SUCCESS';

   --CONSTANTS ERRORS
   CSL_CODE_ERROR                     CONSTANT SIMPLE_INTEGER := -20012;

   --CONSTANTS MESSAGES
   CSL_SUCCESS_ERROR                  CONSTANT VARCHAR2(28) := 'SUCCESS, WITH ERRORS RECORDS';
   CSL_TYPE_NULL                      CONSTANT VARCHAR2(20) := 'TYPE INTEREST NULL';
   CSL_SPACE                          CONSTANT VARCHAR2(2) := ' ';
   CSL_ARROW                          CONSTANT VARCHAR2(5) := ' -> ';
   CSL_COMMA                          CONSTANT VARCHAR2(5) := ' , ';

   CSL_GEN_OPERATION                  CONSTANT VARCHAR2(30) := 'SP_BTC_EXE_OPERATION_BALANCE';
   CSL_INS_LOAN_INTEREST              CONSTANT VARCHAR2(30) := 'SP_BTC_INS_LOAN_INTEREST';

   VL_I                               NUMBER(10,0) := 0;

   VL_STATUS_CODE                     NUMBER(10,0) := 0;
   VL_STATUS_MSG                      VARCHAR2(1000);

   --VARIABLES INTERNAL TYPES ASSIGNMENT
   VLTAB_ERRORS                       SC_CREDIT.TYP_TAB_BTC_ERROR;
   VLTAB_LOANS                        SC_CREDIT.TYP_TAB_BTC_LOAN;
   VLTAB_OPERATIONS                   SC_CREDIT.TYP_TAB_BTC_OPERATION;
   VLTAB_OPERATIONS_DETAIL            SC_CREDIT.TYP_TAB_BTC_DETAIL;
   VLTAB_BALANCES                     SC_CREDIT.TYP_TAB_BTC_BALANCE;
   VLTAB_BALANCES_DETAIL              SC_CREDIT.TYP_TAB_BTC_DETAIL;

   --VARIABLES OF ITERATION BY LOAN
   VLREC_LOAN                        SC_CREDIT.TYP_REC_BTC_LOAN;
   VLTAB_OPERATIONS_BY_LOAN          SC_CREDIT.TYP_TAB_BTC_OPERATION;
   VLTAB_OPERATIONS_DET_BY_LOAN      SC_CREDIT.TYP_TAB_BTC_DETAIL;
   VLTAB_BALANCES_BY_LOAN            SC_CREDIT.TYP_TAB_BTC_BALANCE;
   VLTAB_BALANCES_DET_BY_LOAN        SC_CREDIT.TYP_TAB_BTC_DETAIL;

   VL_DESC_COUNT                     VARCHAR2(500);
   VL_T1                             TIMESTAMP;
   VL_T2                             TIMESTAMP;

BEGIN
   PA_STATUS_CODE := CSL_SUCCESS_CODE;
   PA_STATUS_MSG := CSL_SUCCESS_MSG;
   PA_RECORDS_SUCCESS := CSL_0;
   PA_RECORDS_ERROR := CSL_0;
   PA_RECORDS_READ := CSL_0;
   VLTAB_ERRORS := SC_CREDIT.TYP_TAB_BTC_ERROR();
   VL_T1 := systimestamp;

   IF PTAB_INTEREST IS NULL OR PTAB_LOANS IS NULL
         OR PTAB_OPERATIONS IS NULL OR PTAB_OPERATIONS_DETAIL IS NULL
         OR PTAB_BALANCES IS NULL OR PTAB_BALANCES_DETAIL IS NULL THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_TYPE_NULL);
   END IF;

   VL_I := PTAB_INTEREST.FIRST;
   PA_RECORDS_READ := PTAB_INTEREST.COUNT;

   --INTERNAL TYPES ASSIGNMENT
   VLTAB_LOANS             := PTAB_LOANS;
   VLTAB_OPERATIONS        := PTAB_OPERATIONS;
   VLTAB_OPERATIONS_DETAIL := PTAB_OPERATIONS_DETAIL;
   VLTAB_BALANCES          := PTAB_BALANCES;
   VLTAB_BALANCES_DETAIL   := PTAB_BALANCES_DETAIL;

   WHILE (VL_I IS NOT NULL) LOOP
      BEGIN

         VLTAB_OPERATIONS_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_OPERATION();
         VLTAB_OPERATIONS_DET_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_DETAIL();
         VLTAB_BALANCES_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_BALANCE();
         VLTAB_BALANCES_DET_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_DETAIL();

         IF(PTAB_INTEREST(VL_I).FI_BAN_OPERATION = CSL_1)THEN
            --TAB BY LOAN ASSIGNMENT
            <<loopLoanAssignment>>
            WHILE VLTAB_LOANS.COUNT > CSL_0 AND PTAB_INTEREST.EXISTS(VL_I) LOOP
               IF VLTAB_LOANS(VLTAB_LOANS.FIRST).FI_LOAN_ID IS NULL AND VLTAB_LOANS(VLTAB_LOANS.FIRST).FI_ADMIN_CENTER_ID IS NULL THEN
                  VLTAB_LOANS.DELETE(VLTAB_LOANS.FIRST);
               ELSIF VLTAB_LOANS(VLTAB_LOANS.FIRST).FI_LOAN_ID = PTAB_INTEREST(VL_I).FI_LOAN_ID
                  AND VLTAB_LOANS(VLTAB_LOANS.FIRST).FI_ADMIN_CENTER_ID = PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID THEN

                  VLREC_LOAN := VLTAB_LOANS(VLTAB_LOANS.FIRST);
                  VLTAB_LOANS.DELETE(VLTAB_LOANS.FIRST);
               ELSE
                  EXIT loopLoanAssignment;
               END IF;
            END LOOP loopLoanAssignment;

            --TAB BY OPERATION ASSIGNMENT
            <<loopOperationAssignment>>
            WHILE VLTAB_OPERATIONS.COUNT > CSL_0 AND PTAB_INTEREST.EXISTS(VL_I) LOOP
               IF VLTAB_OPERATIONS(VLTAB_OPERATIONS.FIRST).FI_LOAN_ID IS NULL AND VLTAB_OPERATIONS(VLTAB_OPERATIONS.FIRST).FI_ADMIN_CENTER_ID IS NULL THEN
                  VLTAB_OPERATIONS.DELETE(VLTAB_OPERATIONS.FIRST);
               ELSIF VLTAB_OPERATIONS(VLTAB_OPERATIONS.FIRST).FI_LOAN_ID = PTAB_INTEREST(VL_I).FI_LOAN_ID
                  AND VLTAB_OPERATIONS(VLTAB_OPERATIONS.FIRST).FI_ADMIN_CENTER_ID = PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID THEN

                  VLTAB_OPERATIONS_BY_LOAN.EXTEND;
                  VLTAB_OPERATIONS_BY_LOAN(VLTAB_OPERATIONS_BY_LOAN.LAST) := VLTAB_OPERATIONS(VLTAB_OPERATIONS.FIRST);
                  VLTAB_OPERATIONS.DELETE(VLTAB_OPERATIONS.FIRST);
               ELSE
                  EXIT loopOperationAssignment;
               END IF;
            END LOOP loopOperationAssignment;

            --TAB BY OPERATION DET ASSIGNMENT
            <<loopOperationDetAssignment>>
            WHILE VLTAB_OPERATIONS_DETAIL.COUNT > CSL_0 AND PTAB_INTEREST.EXISTS(VL_I) LOOP
               IF VLTAB_OPERATIONS_DETAIL(VLTAB_OPERATIONS_DETAIL.FIRST).FI_LOAN_ID IS NULL AND VLTAB_OPERATIONS_DETAIL(VLTAB_OPERATIONS_DETAIL.FIRST).FI_ADMIN_CENTER_ID IS NULL THEN
                  VLTAB_OPERATIONS_DETAIL.DELETE(VLTAB_OPERATIONS_DETAIL.FIRST);
               ELSIF VLTAB_OPERATIONS_DETAIL(VLTAB_OPERATIONS_DETAIL.FIRST).FI_LOAN_ID = PTAB_INTEREST(VL_I).FI_LOAN_ID
                  AND VLTAB_OPERATIONS_DETAIL(VLTAB_OPERATIONS_DETAIL.FIRST).FI_ADMIN_CENTER_ID = PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID THEN

                  VLTAB_OPERATIONS_DET_BY_LOAN.EXTEND;
                  VLTAB_OPERATIONS_DET_BY_LOAN(VLTAB_OPERATIONS_DET_BY_LOAN.LAST) := VLTAB_OPERATIONS_DETAIL(VLTAB_OPERATIONS_DETAIL.FIRST);
                  VLTAB_OPERATIONS_DETAIL.DELETE(VLTAB_OPERATIONS_DETAIL.FIRST);
               ELSE
                  EXIT loopOperationDetAssignment;
               END IF;
            END LOOP loopOperationDetAssignment;

            --TAB BY BALANCES ASSIGNMENT
            <<loopBalanceAssignment>>
            WHILE VLTAB_BALANCES.COUNT > CSL_0 AND PTAB_INTEREST.EXISTS(VL_I) LOOP
               IF VLTAB_BALANCES(VLTAB_BALANCES.FIRST).FI_LOAN_ID IS NULL AND VLTAB_BALANCES(VLTAB_BALANCES.FIRST).FI_ADMIN_CENTER_ID IS NULL THEN
                  VLTAB_BALANCES.DELETE(VLTAB_BALANCES.FIRST);
               ELSIF VLTAB_BALANCES(VLTAB_BALANCES.FIRST).FI_LOAN_ID = PTAB_INTEREST(VL_I).FI_LOAN_ID
                  AND VLTAB_BALANCES(VLTAB_BALANCES.FIRST).FI_ADMIN_CENTER_ID = PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID THEN

                  VLTAB_BALANCES_BY_LOAN.EXTEND;
                  VLTAB_BALANCES_BY_LOAN(VLTAB_BALANCES_BY_LOAN.LAST) := VLTAB_BALANCES(VLTAB_BALANCES.FIRST);
                  VLTAB_BALANCES.DELETE(VLTAB_BALANCES.FIRST);
               ELSE
                  EXIT loopBalanceAssignment;
               END IF;
            END LOOP loopBalanceAssignment;

            --TAB BY BALANCES DET ASSIGNMENT
            <<loopBalanceDetAssignment>>
            WHILE VLTAB_BALANCES_DETAIL.COUNT > CSL_0 AND PTAB_INTEREST.EXISTS(VL_I) LOOP
               IF VLTAB_BALANCES_DETAIL(VLTAB_BALANCES_DETAIL.FIRST).FI_LOAN_ID IS NULL AND VLTAB_BALANCES_DETAIL(VLTAB_BALANCES_DETAIL.FIRST).FI_ADMIN_CENTER_ID IS NULL THEN
                  VLTAB_BALANCES_DETAIL.DELETE(VLTAB_BALANCES_DETAIL.FIRST);
               ELSIF VLTAB_BALANCES_DETAIL(VLTAB_BALANCES_DETAIL.FIRST).FI_LOAN_ID = PTAB_INTEREST(VL_I).FI_LOAN_ID
                  AND VLTAB_BALANCES_DETAIL(VLTAB_BALANCES_DETAIL.FIRST).FI_ADMIN_CENTER_ID = PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID THEN

                  VLTAB_BALANCES_DET_BY_LOAN.EXTEND;
                  VLTAB_BALANCES_DET_BY_LOAN(VLTAB_BALANCES_DET_BY_LOAN.LAST) := VLTAB_BALANCES_DETAIL(VLTAB_BALANCES_DETAIL.FIRST);
                  VLTAB_BALANCES_DETAIL.DELETE(VLTAB_BALANCES_DETAIL.FIRST);
               ELSE
                  EXIT loopBalanceDetAssignment;
               END IF;
            END LOOP loopBalanceDetAssignment;

            --EXECUTE PROCESS TO AFFECT LOAN, OPERATIONS AND BALANCES
            SC_CREDIT.SP_BTC_EXE_OPERATION_BALANCE(
               VLREC_LOAN
               ,VLTAB_OPERATIONS_BY_LOAN
               ,VLTAB_OPERATIONS_DET_BY_LOAN
               ,VLTAB_BALANCES_BY_LOAN
               ,VLTAB_BALANCES_DET_BY_LOAN
               ,PA_DEVICE
               ,PA_GPS_LATITUDE
               ,PA_GPS_LONGITUDE
               ,CSL_0
               ,VL_STATUS_CODE
               ,VL_STATUS_MSG);

            IF(VL_STATUS_CODE != CSL_0)THEN
               RAISE_APPLICATION_ERROR( CSL_CODE_ERROR, CSL_GEN_OPERATION || CSL_SPACE || VL_STATUS_MSG);
            END IF;

         END IF;

         --Insert in the table of interest
         SC_CREDIT.SP_BTC_INS_DAILY_INTEREST
            (PTAB_INTEREST(VL_I).FI_LOAN_ID
            ,PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID
            ,PTAB_INTEREST(VL_I).FI_PAYMENT_NUMBER_ID
            ,PTAB_INTEREST(VL_I).FI_DAYS_ACUM_BY_TERM
            ,PTAB_INTEREST(VL_I).FN_DAILY_INTEREST
            ,PTAB_INTEREST(VL_I).FN_ACCRUED_INTEREST_BALANCE
            ,PTAB_INTEREST(VL_I).FN_ACCRUED_INTEREST_LOAN
            ,PTAB_INTEREST(VL_I).FN_PAYMENT_INTEREST
            ,PTAB_INTEREST(VL_I).FC_CONDITION_INTEREST
            ,PTAB_INTEREST(VL_I).FD_OPERATION_DATE
            ,PTAB_INTEREST(VL_I).FD_APPLICATION_DATE
            ,PTAB_INTEREST(VL_I).FI_TRANSACTION
            ,CSL_0
            ,VL_STATUS_CODE
            ,VL_STATUS_MSG);

         IF(VL_STATUS_CODE != CSL_0)THEN
            RAISE_APPLICATION_ERROR( CSL_CODE_ERROR, CSL_INS_LOAN_INTEREST || CSL_SPACE || VL_STATUS_MSG);
         END IF;

         --DELETE TYPES BY LOAN (CYCLE)
         VLTAB_OPERATIONS_BY_LOAN.DELETE;
         VLTAB_OPERATIONS_DET_BY_LOAN.DELETE;
         VLTAB_BALANCES_BY_LOAN.DELETE;
         VLTAB_BALANCES_DET_BY_LOAN.DELETE;

         PA_RECORDS_SUCCESS := PA_RECORDS_SUCCESS + CSL_1;

      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK;
            SC_CREDIT.SP_BATCH_ERROR_LOG(
               UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
               ,SQLCODE
               ,SQLERRM
               ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
               ,PTAB_INTEREST(VL_I).FI_TRANSACTION--TODO VALIDATE
               ,PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID
                  ||CSL_COMMA
                  ||PTAB_INTEREST(VL_I).FI_LOAN_ID);

            PA_RECORDS_ERROR :=PA_RECORDS_ERROR + CSL_1;

            --Adding to a collection, loans with error, detail
            VLTAB_ERRORS.EXTEND;
            VLTAB_ERRORS(VLTAB_ERRORS.LAST) :=
               SC_CREDIT.TYP_REC_BTC_ERROR(
                  PTAB_INTEREST(VL_I).FI_ADMIN_CENTER_ID
                  ,PTAB_INTEREST(VL_I).FI_LOAN_ID
                  ,UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
                  ,SQLCODE
                  ,SQLERRM
                  ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                  ,SYSDATE
                  ,PTAB_INTEREST(VL_I).FI_TRANSACTION
                  ,NULL);
      END;
      VL_I := PTAB_INTEREST.NEXT(VL_I);
      COMMIT;
   END LOOP;

   COMMIT;

   VL_DESC_COUNT := ' TAB_LOANS '||VLTAB_LOANS.COUNT
                  ||' TAB_OPERATIONS '||VLTAB_OPERATIONS.COUNT
                  ||' TAB_OPERATIONS_DETAIL '||VLTAB_OPERATIONS_DETAIL.COUNT
                  ||' TAB_BALANCES '||VLTAB_BALANCES.COUNT
                  ||' TAB_BALANCES_DETAIL '||VLTAB_BALANCES_DETAIL.COUNT;

   --DELETE TYPES INTERNS
   VLTAB_LOANS.DELETE;
   VLTAB_OPERATIONS.DELETE;
   VLTAB_OPERATIONS_DETAIL.DELETE;
   VLTAB_BALANCES.DELETE;
   VLTAB_BALANCES_DETAIL.DELETE;

   PTAB_ERROR_RECORDS := VLTAB_ERRORS;
   IF(PA_RECORDS_ERROR > CSL_0)THEN
      PA_STATUS_CODE := CSL_1;
      PA_STATUS_MSG := CSL_SUCCESS_ERROR;
   END IF;

   VL_T2 := systimestamp;
   PA_STATUS_MSG := PA_STATUS_MSG
      || ' ' || 'Elapsed Seconds: '||TO_CHAR(VL_T2-VL_T1, 'SSSS.FF')
      || ' ' || VL_DESC_COUNT;

EXCEPTION
   WHEN OTHERS THEN
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
                                  ,SQLCODE
                                  ,SQLERRM
                                  ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                  ,CSL_0
                                  ,NULL);
END SP_BTC_APPLY_DAILY_INTEREST;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_APPLY_DAILY_INTEREST TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_APPLY_DAILY_INTEREST TO USRBTCCREDIT1
/
