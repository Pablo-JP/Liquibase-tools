CREATE OR REPLACE  PACKAGE SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT 
  AS
  -- GLOBAL CONSTANTS
    CSG_ZERO                 CONSTANT SIMPLE_INTEGER := 0;
    CSG_ONE                  CONSTANT SIMPLE_INTEGER := 1;
    CSG_X                    CONSTANT VARCHAR2(3)    := 'X';
    CSG_ARROW                CONSTANT VARCHAR2(5)    := ' -> ';
    CSG_COLON                CONSTANT VARCHAR2(5)    := ' : ';
    CSG_FORMAT_DATE          CONSTANT VARCHAR2(30)   := 'YYYY-MM-DDTHH24:MI:SSTZH:TZM';
    CSG_CURRENT_DATE         CONSTANT DATE           := SYSDATE;
    CSG_CURRENT_USER         CONSTANT VARCHAR2(50)   := USER;
    CSG_SUCCESS_CODE         CONSTANT SIMPLE_INTEGER := 0;
    CSG_SUCCESS_MSG          CONSTANT VARCHAR2(50)   := 'SUCCESS';
    CSG_FOREING_KEY_CODE     CONSTANT SIMPLE_INTEGER := -2291;
    CSG_FOREING_KEY_MSG      CONSTANT VARCHAR2(50)   := 'THE FOREING KEY VIOLATED';
    CSG_PRIMARY_KEY_CODE     CONSTANT SIMPLE_INTEGER := -00001;
    CSG_PRIMARY_KEY_MSG      CONSTANT VARCHAR2(50)   := 'DATA DUPLICATED';
    CSG_DATA_NOT_SAVED_CODE  CONSTANT SIMPLE_INTEGER := -20400;
    CSG_DATA_NOT_SAVED_MSG   CONSTANT VARCHAR2(50)   := 'DATA NOT SAVED';

  -- PROCEDURE THAT ORQUESTS THE DISBURSEMENT
  PROCEDURE SP_EXE_LOAN_DISBURSEMENT (
    PA_DATA_LOAN_OPERATION           IN CLOB
    ,PA_DATA_LOAN_OPERATION_DETAIL   IN CLOB
    ,PA_DATA_LOAN_BALANCE            IN CLOB
    ,PA_DATA_LOAN_BALANCE_DETAIL     IN CLOB
    ,PA_DATA_LOAN_TENDER             IN CLOB
    ,PA_DATA_LOAN_STATUS             IN CLOB
    ,PA_DATA_LOAN                    IN CLOB
    ,PA_FINANCE_CHARGE_BALANCE       OUT NUMBER
    ,PA_SEQUENCE                     OUT NUMBER
    ,PA_LOAN_OPERATION_ID_OUT        OUT NUMBER
    ,PA_OPERATION_DATE_OUT           OUT VARCHAR2
    ,PA_STATUS_CODE                  OUT NUMBER
    ,PA_STATUS_MSG                   OUT VARCHAR2);

  -- PROCEDURE TO INSERT A LOAN OPERATION
  PROCEDURE SP_INS_LOAN_OPERATION(
    PA_DATA_LOAN_OPERATION    IN CLOB
    ,PA_LOAN_OPERATION_ID     IN NUMBER
    ,PA_STATUS_CODE           OUT NUMBER
    ,PA_STATUS_MSG            OUT VARCHAR2);

  -- PROCEDURE TO INSERT THE DETAILS OF A LOAN OPERATION
  PROCEDURE SP_INS_LOAN_OPERATION_DETAIL (
    PA_DATA_LOAN_OPERATION_DETAIL   IN CLOB
    ,PA_LOAN_OPERATION_ID           IN NUMBER
    ,PA_STATUS_CODE                 OUT NUMBER
    ,PA_STATUS_MSG                  OUT VARCHAR2);

  -- PROCEDURE TO INSERT A LOAN BALANCE
  PROCEDURE SP_INS_LOAN_BALANCE (
    PA_DATA_LOAN_BALANCE    IN CLOB
    ,PA_LOAN_BALANCE_ID     IN NUMBER
    ,PA_LOAN_OPERATION_ID   IN NUMBER
    ,PA_BALANCE_SEQ         OUT NUMBER
    ,PA_OLD_BALANCE_ID      OUT NUMBER
    ,PA_STATUS_CODE         OUT NUMBER
    ,PA_STATUS_MSG          OUT VARCHAR2);

  -- PROCEDURE TO INSERT THE DETAILS OF A LOAN BALANCE
  PROCEDURE SP_INS_LOAN_BALANCE_DETAIL (
    PA_DATA_LOAN_BALANCE_DETAIL IN CLOB
    ,PA_LOAN_BALANCE_ID         IN NUMBER
    ,PA_OLD_BALANCE_ID          IN NUMBER
    ,PA_STATUS_CODE             OUT NUMBER
    ,PA_STATUS_MSG              OUT VARCHAR2);

  -- PROCEDURE TO INSERT THE TENDERS OF THE OPERATION
  PROCEDURE SP_INS_LOAN_TENDER (
    PA_DATA_LOAN_TENDER   IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2);

  -- PROCEDURE TO INSERT THE LOAN STATUS
    PROCEDURE SP_INS_LOAN_STATUS (
    PA_DATA_LOAN_STATUS   IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2);

  -- PROCEDURE TO UPDATE THE LOAN STATUS AND PRINCIPAL BALANCE OF THE LOAN
  PROCEDURE SP_UPD_LOAN (
    PA_DATA_LOAN    IN CLOB
    ,PA_STATUS_CODE OUT NUMBER
    ,PA_STATUS_MSG  OUT VARCHAR2);

  END PA_EXE_LOAN_DISBURSEMENT;

/




CREATE OR REPLACE  PACKAGE BODY SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT 
  AS
  PROCEDURE SP_EXE_LOAN_DISBURSEMENT (
    PA_DATA_LOAN_OPERATION           IN CLOB
    ,PA_DATA_LOAN_OPERATION_DETAIL   IN CLOB
    ,PA_DATA_LOAN_BALANCE            IN CLOB
    ,PA_DATA_LOAN_BALANCE_DETAIL     IN CLOB
    ,PA_DATA_LOAN_TENDER             IN CLOB
    ,PA_DATA_LOAN_STATUS             IN CLOB
    ,PA_DATA_LOAN                    IN CLOB
    ,PA_FINANCE_CHARGE_BALANCE       OUT NUMBER
    ,PA_SEQUENCE                     OUT NUMBER
    ,PA_LOAN_OPERATION_ID_OUT        OUT NUMBER
    ,PA_OPERATION_DATE_OUT           OUT VARCHAR2
    ,PA_STATUS_CODE                  OUT NUMBER
    ,PA_STATUS_MSG                   OUT VARCHAR2)
  AS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT ORQUEST THE PROCESS OF DISBURSEMENT
* CREATED DATE: 22/08/2024
* CREATOR: JOSE DE JESUS BRAVO AGUILAR / RICARDO HAZAEL GOMEZ ALVAREZ
* MODIFICATION DATE: 23/12/2024
************************************************************** */
  -- LOCAL CONSTANTS
    CSL_ISSUE_OPERATION_CODE        CONSTANT SIMPLE_INTEGER := -20050;
    CSL_ISSUE_OPERATION_MSG         CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_OPERATION: ';
    CSL_ISSUE_OPERATION_DETAIL_CODE CONSTANT SIMPLE_INTEGER := -20060;
    CSL_ISSUE_OPERATION_DETAIL_MSG  CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_OPERATION_DETAIL:';
    CSL_ISSUE_BALANCE_CODE          CONSTANT SIMPLE_INTEGER := -20070;
    CSL_ISSUE_BALANCE_MSG           CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_BALANCE: ';
    CSL_ISSUE_BALANCE_DETAIL_CODE   CONSTANT SIMPLE_INTEGER := -20080;
    CSL_ISSUE_BALANCE_DETAIL_MSG    CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_BALANCE_DETAIL: ';
    CSL_ISSUE_UPDATE_CODE           CONSTANT SIMPLE_INTEGER := -20090;
    CSL_ISSUE_UPDATE_MSG            CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_UPD_LOAN: ';
    CSL_ISSUE_LOAN_TENDER_CODE      CONSTANT SIMPLE_INTEGER := -20100;
    CSL_ISSUE_LOAN_TENDER_MSG       CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_TENDER: ';
    CSL_ISSUE_LOAN_STATUS_CODE      CONSTANT SIMPLE_INTEGER := -20110;
    CSL_ISSUE_LOAN_STATUS_MSG       CONSTANT VARCHAR2(50)   := 'ISSUE IN SP_INS_LOAN_STATUS: ';
    CSL_EXE_DISBURSEMENT            CONSTANT VARCHAR2(50)   := 'SP_EXE_LOAN_DISBURSEMENT';
  -- EXCEPTIONS
  EXC_ISSUE_OPERATION           EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_OPERATION, CSL_ISSUE_OPERATION_CODE);
  EXC_ISSUE_OPERATION_DETAIL    EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_OPERATION_DETAIL, CSL_ISSUE_OPERATION_DETAIL_CODE);
  EXC_ISSUE_BALANCE             EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_BALANCE, CSL_ISSUE_BALANCE_CODE);
  EXC_ISSUE_BALANCE_DETAIL      EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_BALANCE_DETAIL, CSL_ISSUE_BALANCE_DETAIL_CODE);
  EXC_ISSUE_LOAN_TENDER         EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_LOAN_TENDER, CSL_ISSUE_LOAN_TENDER_CODE);
  EXC_ISSUE_LOAN_STATUS         EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_LOAN_STATUS, CSL_ISSUE_LOAN_STATUS_CODE);
  EXC_ISSUE_UPDATE_LOAN         EXCEPTION;
  PRAGMA EXCEPTION_INIT (EXC_ISSUE_UPDATE_LOAN, CSL_ISSUE_UPDATE_CODE);
  -- VARIABLES
    VL_LOAN_OPERATION_ID        NUMBER(15);
    PA_LOAN_OPERATION_ID        NUMBER(15);
    VL_LOAN_BALANCE_ID          NUMBER(15);
    PA_LOAN_BALANCE_ID          NUMBER(15);
    PA_OLD_BALANCE_ID           NUMBER(15);
    VL_OPERATION_DATE           DATE;
    PA_BALANCE_SEQ              NUMBER(5);

  BEGIN
    VL_LOAN_OPERATION_ID    := SC_CREDIT.FN_GET_NEXT_LOAN_OPERATION_ID;
    VL_LOAN_BALANCE_ID      := SC_CREDIT.FN_GET_NEXT_LOAN_BALANCE_ID;
    PA_LOAN_OPERATION_ID    := VL_LOAN_OPERATION_ID;
    PA_LOAN_BALANCE_ID      := VL_LOAN_BALANCE_ID;

  BEGIN
    SP_INS_LOAN_OPERATION (
      PA_DATA_LOAN_OPERATION
      ,PA_LOAN_OPERATION_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_OPERATION;
    END IF;

    SP_INS_LOAN_OPERATION_DETAIL (
      PA_DATA_LOAN_OPERATION_DETAIL
      ,PA_LOAN_OPERATION_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_OPERATION_DETAIL;
    END IF;

    SP_INS_LOAN_BALANCE (
      PA_DATA_LOAN_BALANCE
      ,PA_LOAN_BALANCE_ID
      ,PA_LOAN_OPERATION_ID
      ,PA_BALANCE_SEQ
      ,PA_OLD_BALANCE_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_BALANCE;
    END IF;

    SP_INS_LOAN_BALANCE_DETAIL (
      PA_DATA_LOAN_BALANCE_DETAIL
      ,PA_LOAN_BALANCE_ID
      ,PA_OLD_BALANCE_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_BALANCE_DETAIL;
    END IF;

    SP_INS_LOAN_TENDER (
      PA_DATA_LOAN_TENDER
      ,PA_LOAN_OPERATION_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_LOAN_TENDER;
    END IF;

    SP_INS_LOAN_STATUS (
      PA_DATA_LOAN_STATUS
      ,PA_LOAN_OPERATION_ID
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_LOAN_STATUS;
    END IF;

    SP_UPD_LOAN (
      PA_DATA_LOAN
      ,PA_STATUS_CODE
      ,PA_STATUS_MSG);
    IF PA_STATUS_CODE <> CSG_ZERO THEN
      RAISE EXC_ISSUE_UPDATE_LOAN;
    END IF;

  COMMIT;

    PA_SEQUENCE := PA_BALANCE_SEQ;

    SELECT FN_FINANCE_CHARGE_BALANCE INTO PA_FINANCE_CHARGE_BALANCE FROM SC_CREDIT.TA_LOAN_BALANCE
      WHERE FI_LOAN_OPERATION_ID = PA_LOAN_OPERATION_ID;

    SELECT FD_OPERATION_DATE INTO VL_OPERATION_DATE FROM SC_CREDIT.TA_LOAN_OPERATION
      WHERE FI_LOAN_OPERATION_ID = PA_LOAN_OPERATION_ID;

    PA_OPERATION_DATE_OUT := TO_CHAR(CAST(VL_OPERATION_DATE AS TIMESTAMP WITH TIME ZONE), CSG_FORMAT_DATE);
    PA_LOAN_OPERATION_ID_OUT := PA_LOAN_OPERATION_ID;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG  := CSG_SUCCESS_MSG;
  EXCEPTION
    WHEN EXC_ISSUE_OPERATION THEN
    ROLLBACK;
        PA_STATUS_MSG := CSL_ISSUE_OPERATION_MSG || CSL_ISSUE_OPERATION_CODE || CSG_ARROW || PA_STATUS_CODE ||
          CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
        PA_STATUS_CODE := CSL_ISSUE_OPERATION_CODE;
        SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
          DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_OPERATION_DETAIL THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_OPERATION_DETAIL_MSG || CSL_ISSUE_OPERATION_DETAIL_CODE  || CSG_ARROW ||
        PA_STATUS_CODE || CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_OPERATION_DETAIL_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_BALANCE THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_BALANCE_MSG || CSL_ISSUE_BALANCE_CODE || CSG_ARROW || PA_STATUS_CODE ||
        CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_BALANCE_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_BALANCE_DETAIL THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_BALANCE_DETAIL_MSG || CSL_ISSUE_BALANCE_DETAIL_CODE || CSG_ARROW ||
        PA_STATUS_CODE || CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_BALANCE_DETAIL_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_LOAN_TENDER THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_LOAN_TENDER_MSG || CSL_ISSUE_LOAN_TENDER_CODE  || CSG_ARROW ||
        PA_STATUS_CODE || CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_LOAN_TENDER_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_LOAN_STATUS THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_LOAN_STATUS_MSG || CSL_ISSUE_LOAN_STATUS_CODE  || CSG_ARROW ||
        PA_STATUS_CODE || CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_LOAN_STATUS_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN EXC_ISSUE_UPDATE_LOAN THEN
    ROLLBACK;
      PA_STATUS_MSG := CSL_ISSUE_UPDATE_MSG || CSL_ISSUE_UPDATE_CODE || CSG_ARROW || PA_STATUS_CODE ||
        CSG_COLON || PA_STATUS_MSG || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      PA_STATUS_CODE := CSL_ISSUE_UPDATE_CODE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
        PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_EXE_DISBURSEMENT, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, CSG_X);
    END;
  END SP_EXE_LOAN_DISBURSEMENT;

  PROCEDURE SP_INS_LOAN_OPERATION (
    PA_DATA_LOAN_OPERATION    IN CLOB
    ,PA_LOAN_OPERATION_ID     IN NUMBER
    ,PA_STATUS_CODE           OUT NUMBER
    ,PA_STATUS_MSG            OUT VARCHAR2)
IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE LOAN OPERATION OF DISBURSEMENT
************************************************************** */
  -- CONSTANTS
  CSL_INSERT_OPERATION     CONSTANT VARCHAR2(50) := 'CSL_INSERT_OPERATION';
  -- VARIABLES
  VL_COUNTRY_ID             NUMBER(3);
  VL_COMPANY_ID             NUMBER(3);
  VL_BUSINESS_UNIT_ID       NUMBER(5);
  VL_LOAN_ID                NUMBER(15);
  VL_ADMIN_CENTER_ID        NUMBER(8);
  VL_OPERATION_TYPE_ID      NUMBER(5);
  VL_TRANSACTION            NUMBER(33);
  VL_PLATFORM_ID            VARCHAR2(6);
  VL_SUB_PLATFORM_ID        VARCHAR2(6);
  VL_OPERATION_AMOUNT       NUMBER(12,2);
  VL_APPLICATION_CHAR       VARCHAR2(30);
  VL_APPLICATION_DATE       DATE;
  VL_END_USER               VARCHAR2(10);
  VL_UUID_TRACKING          VARCHAR2(36);
  VL_GPS_LATITUDE           VARCHAR2(15);
  VL_GPS_LONGITUDE          VARCHAR2(15);
  VL_IP_ADDRESS             VARCHAR2(39);
  VL_DEVICE                 VARCHAR2(50);
  -- EXCEPTIONS
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  BEGIN
    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG  := CSG_SUCCESS_MSG;
    VL_COUNTRY_ID           := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.countryId');
    VL_COMPANY_ID           := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.companyId');
    VL_BUSINESS_UNIT_ID     := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.businessUnitId');
    VL_LOAN_ID              := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.loanId');
    VL_ADMIN_CENTER_ID      := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.adminCenterId');
    VL_OPERATION_TYPE_ID    := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.operationTypeId');
    VL_TRANSACTION          := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.transaction');
    VL_PLATFORM_ID          := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.platformId');
    VL_SUB_PLATFORM_ID      := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.subPlatformId');
    VL_OPERATION_AMOUNT     := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.operationAmount');
    VL_APPLICATION_CHAR     := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.applicationDate');
    VL_END_USER             := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.endUser');
    VL_UUID_TRACKING        := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.uuidTracking');
    VL_GPS_LATITUDE         := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.gpsLatitude');
    VL_GPS_LONGITUDE        := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.gpsLongitude');
    VL_IP_ADDRESS           := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.ipAddress');
    VL_DEVICE               := JSON_VALUE(PA_DATA_LOAN_OPERATION, '$.device');
    VL_APPLICATION_DATE     := CAST(TO_TIMESTAMP_TZ(VL_APPLICATION_CHAR, CSG_FORMAT_DATE) AS DATE);

      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION (
        FI_LOAN_OPERATION_ID
        ,FI_COUNTRY_ID
        ,FI_COMPANY_ID
        ,FI_BUSINESS_UNIT_ID
        ,FI_LOAN_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_OPERATION_TYPE_ID
        ,FI_TRANSACTION
        ,FC_PLATFORM_ID
        ,FC_SUB_PLATFORM_ID
        ,FN_OPERATION_AMOUNT
        ,FD_APPLICATION_DATE
        ,FD_OPERATION_DATE
        ,FI_STATUS
        ,FC_END_USER
        ,FC_UUID_TRACKING
        ,FC_GPS_LATITUDE
        ,FC_GPS_LONGITUDE
        ,FC_IP_ADDRESS
        ,FC_DEVICE
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        PA_LOAN_OPERATION_ID
        ,VL_COUNTRY_ID
        ,VL_COMPANY_ID
        ,VL_BUSINESS_UNIT_ID
        ,VL_LOAN_ID
        ,VL_ADMIN_CENTER_ID
        ,VL_OPERATION_TYPE_ID
        ,VL_TRANSACTION
        ,VL_PLATFORM_ID
        ,VL_SUB_PLATFORM_ID
        ,VL_OPERATION_AMOUNT
        ,VL_APPLICATION_DATE
        ,CSG_CURRENT_DATE
        ,CSG_ONE
        ,VL_END_USER
        ,VL_UUID_TRACKING
        ,VL_GPS_LATITUDE
        ,VL_GPS_LONGITUDE
        ,VL_IP_ADDRESS
        ,VL_DEVICE
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, VL_UUID_TRACKING, PA_DATA_LOAN_OPERATION);
  END SP_INS_LOAN_OPERATION;

  PROCEDURE SP_INS_LOAN_OPERATION_DETAIL (
    PA_DATA_LOAN_OPERATION_DETAIL               IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE DETAILS OF THE LOAN OPERATION OF DISBURSEMENT
************************************************************** */
  -- LOCAL CONSTANTS
  CSL_INSERT_OPERATION_DETAIL CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_OPERATION_DETAIL';
  -- EXCEPTIONS
  EXC_DATA_NOT_SAVED        EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
  -- VARIABLES
    VL_INSERT_COUNT         NUMBER(1) := CSG_ZERO;

  BEGIN
    FOR JSON_REC IN (
      SELECT
        FI_LOAN_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_CONCEPT_ID
        ,FN_ITEM_AMOUNT
      FROM JSON_TABLE(
        PA_DATA_LOAN_OPERATION_DETAIL
        ,'$[*]'
      COLUMNS (
        FI_LOAN_ID          NUMBER(15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID NUMBER(8) PATH '$.adminCenterId'
        ,FI_LOAN_CONCEPT_ID NUMBER(5) PATH '$.loanConceptId'
        ,FN_ITEM_AMOUNT     NUMBER(12,2) PATH '$.itemAmount')))
      LOOP
      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION_DETAIL (
        FI_LOAN_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_CONCEPT_ID
        ,FN_ITEM_AMOUNT
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        JSON_REC.FI_LOAN_ID
        ,PA_LOAN_OPERATION_ID
        ,JSON_REC.FI_ADMIN_CENTER_ID
        ,JSON_REC.FI_LOAN_CONCEPT_ID
        ,JSON_REC.FN_ITEM_AMOUNT
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
       ,CSG_CURRENT_DATE);

        VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
      END LOOP;

      IF VL_INSERT_COUNT = CSG_ZERO THEN
        RAISE EXC_DATA_NOT_SAVED;
      END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;
  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
      PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_OPERATION_DETAIL, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_OPERATION_DETAIL);
  END SP_INS_LOAN_OPERATION_DETAIL;

   PROCEDURE SP_INS_LOAN_BALANCE (
    PA_DATA_LOAN_BALANCE   IN CLOB
    ,PA_LOAN_BALANCE_ID    IN NUMBER
    ,PA_LOAN_OPERATION_ID  IN NUMBER
    ,PA_BALANCE_SEQ        OUT NUMBER
    ,PA_OLD_BALANCE_ID     OUT NUMBER
    ,PA_STATUS_CODE        OUT NUMBER
    ,PA_STATUS_MSG         OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE LOAN BALANCE OF THE DISBURSEMENT
************************************************************** */
  -- CONSTANTS
  CSL_INSERT_BALANCE            CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_BALANCE';
  -- VARIABLES
  VL_ADMIN_CENTER_ID            NUMBER(8);
  VL_LOAN_ID                    NUMBER(15);
  VL_PRINCIPAL_BALANCE          NUMBER(12,2);
  VL_ADDITIONAL_CHARGE_BALANCE  NUMBER(12,2);
  VL_BALANCE_SEQ                NUMBER(5);
  VL_ROW_BALANCE                NUMBER(3);
  VL_FINANCE_CHARGE_BALANCE     NUMBER(12,2);
  VL_OLD_BALANCE_ID             NUMBER(15);
  -- EXCEPTIONS
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  BEGIN
    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG  := CSG_SUCCESS_MSG;
    VL_ADMIN_CENTER_ID              := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.adminCenterId');
    VL_LOAN_ID                      := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.loanId');
    VL_PRINCIPAL_BALANCE            := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.principalBalance');
    VL_ADDITIONAL_CHARGE_BALANCE    := JSON_VALUE(PA_DATA_LOAN_BALANCE, '$.additionalChargeBalance');

    SELECT NVL(MAX(FI_BALANCE_SEQ), CSG_ZERO) + CSG_ONE
      INTO VL_BALANCE_SEQ
      FROM SC_CREDIT.TA_LOAN_BALANCE
      WHERE FI_LOAN_ID = VL_LOAN_ID
      AND FI_ADMIN_CENTER_ID = VL_ADMIN_CENTER_ID;

      PA_BALANCE_SEQ := VL_BALANCE_SEQ;

    SELECT COUNT (*) INTO VL_ROW_BALANCE
      FROM SC_CREDIT.TA_LOAN_BALANCE
      WHERE FI_LOAN_ID = VL_LOAN_ID
      AND FI_ADMIN_CENTER_ID = VL_ADMIN_CENTER_ID;
      IF VL_ROW_BALANCE > CSG_ZERO THEN

        SELECT FN_FINANCE_CHARGE_BALANCE, FI_LOAN_BALANCE_ID
            INTO VL_FINANCE_CHARGE_BALANCE, VL_OLD_BALANCE_ID
            FROM SC_CREDIT.TA_LOAN_BALANCE
            WHERE FI_LOAN_ID = VL_LOAN_ID
            AND FI_ADMIN_CENTER_ID = VL_ADMIN_CENTER_ID
            AND ROWNUM = CSG_ONE;

            PA_OLD_BALANCE_ID := VL_OLD_BALANCE_ID;

      ELSE
        VL_FINANCE_CHARGE_BALANCE := CSG_ZERO;
        VL_OLD_BALANCE_ID := CSG_ZERO;
        PA_OLD_BALANCE_ID := VL_OLD_BALANCE_ID;
      END IF;

      INSERT INTO SC_CREDIT.TA_LOAN_BALANCE (
        FI_LOAN_BALANCE_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_BALANCE_SEQ
        ,FN_PRINCIPAL_BALANCE
        ,FN_FINANCE_CHARGE_BALANCE
        ,FN_ADDITIONAL_CHARGE_BALANCE
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        PA_LOAN_BALANCE_ID
        ,VL_ADMIN_CENTER_ID
        ,VL_LOAN_ID
        ,PA_LOAN_OPERATION_ID
        ,VL_BALANCE_SEQ
        ,VL_PRINCIPAL_BALANCE
        ,VL_FINANCE_CHARGE_BALANCE
        ,VL_ADDITIONAL_CHARGE_BALANCE
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE);
  END SP_INS_LOAN_BALANCE;

  PROCEDURE SP_INS_LOAN_BALANCE_DETAIL (
    PA_DATA_LOAN_BALANCE_DETAIL   IN CLOB,
    PA_LOAN_BALANCE_ID            IN NUMBER,
    PA_OLD_BALANCE_ID             IN NUMBER,
    PA_STATUS_CODE                OUT NUMBER,
    PA_STATUS_MSG                 OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE DETAILS OF THE LOAN BALANCE OF DISBURSEMENT
************************************************************** */
  -- CONSTANTS
  CSL_INSERT_BALANCE_DETAIL CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_BALANCE_DETAIL';
  -- EXCEPTIONS
  EXC_DATA_NOT_SAVED        EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREIGN_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREIGN_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
  -- VARIABLES
  VL_INSERT_COUNT           NUMBER(3) := CSG_ZERO;

  BEGIN
  FOR JSON_REC IN (
    SELECT
      FI_LOAN_ID
      ,FI_ADMIN_CENTER_ID
      ,FI_LOAN_CONCEPT_ID
      ,FN_ITEM_AMOUNT
    FROM JSON_TABLE(
      PA_DATA_LOAN_BALANCE_DETAIL,
      '$[*]'
      COLUMNS (
        FI_LOAN_ID           NUMBER(15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID  NUMBER(8) PATH '$.adminCenterId'
        ,FI_LOAN_CONCEPT_ID  NUMBER(5) PATH '$.loanConceptId'
        ,FN_ITEM_AMOUNT      NUMBER(12,2) PATH '$.itemAmount')))
      LOOP
    INSERT INTO SC_CREDIT.TA_LOAN_BALANCE_DETAIL (
      FI_LOAN_ID
      ,FI_LOAN_BALANCE_ID
      ,FI_ADMIN_CENTER_ID
      ,FI_LOAN_CONCEPT_ID
      ,FN_ITEM_AMOUNT
      ,FC_USER
      ,FD_CREATED_DATE
      ,FD_MODIFICATION_DATE)
    VALUES (
      JSON_REC.FI_LOAN_ID
      ,PA_LOAN_BALANCE_ID
      ,JSON_REC.FI_ADMIN_CENTER_ID
      ,JSON_REC.FI_LOAN_CONCEPT_ID
      ,JSON_REC.FN_ITEM_AMOUNT
      ,CSG_CURRENT_USER
      ,CSG_CURRENT_DATE
      ,CSG_CURRENT_DATE);

    VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
  END LOOP;

  IF VL_INSERT_COUNT = CSG_ZERO THEN
    RAISE EXC_DATA_NOT_SAVED;
  END IF;

  FOR LBD_REC IN (
    SELECT
        LBD.FI_LOAN_ID
        ,LBD.FI_ADMIN_CENTER_ID
        ,LBD.FI_LOAN_CONCEPT_ID
        ,LBD.FN_ITEM_AMOUNT
    FROM SC_CREDIT.TA_LOAN_BALANCE_DETAIL LBD
    WHERE LBD.FI_LOAN_BALANCE_ID = PA_OLD_BALANCE_ID)
      LOOP
    INSERT INTO SC_CREDIT.TA_LOAN_BALANCE_DETAIL (
        FI_LOAN_ID
        ,FI_LOAN_BALANCE_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_CONCEPT_ID
        ,FN_ITEM_AMOUNT
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        LBD_REC.FI_LOAN_ID
        ,PA_LOAN_BALANCE_ID
        ,LBD_REC.FI_ADMIN_CENTER_ID
        ,LBD_REC.FI_LOAN_CONCEPT_ID
        ,LBD_REC.FN_ITEM_AMOUNT
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);
  END LOOP;

  PA_STATUS_CODE := CSG_SUCCESS_CODE;
  PA_STATUS_MSG := CSG_SUCCESS_MSG;
  EXCEPTION
  WHEN EXC_FOREIGN_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || ' -> ' || SQLERRM || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
  WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || ' -> ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
  WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
    PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || ' -> ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
  WHEN OTHERS THEN
    ROLLBACK;
    PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG := SQLERRM || ' -> ' || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_BALANCE_DETAIL, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_BALANCE_DETAIL);
  END SP_INS_LOAN_BALANCE_DETAIL;

  PROCEDURE SP_INS_LOAN_TENDER (
    PA_DATA_LOAN_TENDER   IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE TENDERS OF THE DISBURSEMENT
************************************************************** */
  -- CONSTANTS
  CSL_INSERT_LOAN_TENDER    CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_OPERATION_TENDER';
  -- EXCEPTIONS
  EXC_DATA_NOT_SAVED        EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_DATA_NOT_SAVED, CSG_DATA_NOT_SAVED_CODE);
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);
  -- VARIABLES
  VL_INSERT_COUNT           NUMBER(3) := CSG_ZERO;
  VL_OPERATION_TENDER_SEQ   NUMBER(5);

  BEGIN
    FOR JSON_REC IN (
      SELECT
        FI_LOAN_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_TENDER_TYPE_ID
        ,FN_OPERATION_AMOUNT
        ,FI_STATUS
      FROM JSON_TABLE(
        PA_DATA_LOAN_TENDER
        ,'$[*]'
      COLUMNS (
        FI_LOAN_ID              NUMBER(15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID     NUMBER(8) PATH '$.adminCenterId'
        ,FI_TENDER_TYPE_ID      NUMBER (4) PATH '$.tenderTypeId'
        ,FN_OPERATION_AMOUNT    NUMBER(12,2) PATH '$.operationAmount'
        ,FI_STATUS              NUMBER (2) PATH '$.status')))
      LOOP

      SELECT NVL(MAX(FI_OPERATION_TENDER_SEQ), CSG_ZERO) + CSG_ONE
        INTO VL_OPERATION_TENDER_SEQ
        FROM SC_CREDIT.TA_LOAN_OPERATION_TENDER
        WHERE FI_LOAN_OPERATION_ID = PA_LOAN_OPERATION_ID
        AND FI_ADMIN_CENTER_ID = JSON_REC.FI_ADMIN_CENTER_ID
        AND FI_LOAN_ID = JSON_REC.FI_LOAN_ID;

      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION_TENDER (
        FI_LOAN_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_TENDER_TYPE_ID
        ,FI_OPERATION_TENDER_SEQ
        ,FN_OPERATION_AMOUNT
        ,FI_STATUS
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        JSON_REC.FI_LOAN_ID
        ,PA_LOAN_OPERATION_ID
        ,JSON_REC.FI_ADMIN_CENTER_ID
        ,JSON_REC.FI_TENDER_TYPE_ID
        ,VL_OPERATION_TENDER_SEQ
        ,JSON_REC.FN_OPERATION_AMOUNT
        ,JSON_REC.FI_STATUS
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

        VL_INSERT_COUNT := VL_INSERT_COUNT + CSG_ONE;
      END LOOP;

      IF VL_INSERT_COUNT = CSG_ZERO THEN
        RAISE EXC_DATA_NOT_SAVED;
      END IF;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;
  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_TENDER, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_TENDER);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_TENDER, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_TENDER);
    WHEN EXC_DATA_NOT_SAVED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSG_DATA_NOT_SAVED_CODE;
      PA_STATUS_MSG := CSG_DATA_NOT_SAVED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_TENDER, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_TENDER);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_TENDER, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_TENDER);
  END SP_INS_LOAN_TENDER;

  PROCEDURE SP_INS_LOAN_STATUS (
    PA_DATA_LOAN_STATUS   IN CLOB
    ,PA_LOAN_OPERATION_ID IN NUMBER
    ,PA_STATUS_CODE       OUT NUMBER
    ,PA_STATUS_MSG        OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT INSERT THE LOAN STATUS OF DISBURSEMENT
************************************************************** */
  -- CONSTANTS
  CSL_INSERT_LOAN_STATUS   CONSTANT VARCHAR2(50) := 'SP_INS_LOAN_STATUS';
  -- VARIABLES
  VL_LOAN_ID                NUMBER(15);
  VL_ADMIN_CENTER_ID        NUMBER(8);
  VL_LOAN_STATUS_ID         NUMBER(5);
  VL_LOAN_STATUS_OLD_ID     NUMBER(5);
  VL_TRIGGER_ID             NUMBER(3);
  -- EXCEPTIONS
  EXC_FOREING_KEY_VIOLATION EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_FOREING_KEY_VIOLATION, CSG_FOREING_KEY_CODE);
  EX_DUPLICATE_PK           EXCEPTION;
  PRAGMA EXCEPTION_INIT(EX_DUPLICATE_PK, CSG_PRIMARY_KEY_CODE);

  BEGIN
    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG  := CSG_SUCCESS_MSG;
    VL_LOAN_ID            := JSON_VALUE(PA_DATA_LOAN_STATUS, '$.loanId');
    VL_ADMIN_CENTER_ID    := JSON_VALUE(PA_DATA_LOAN_STATUS, '$.adminCenterId');
    VL_LOAN_STATUS_ID     := JSON_VALUE(PA_DATA_LOAN_STATUS, '$.loanStatusId');
    VL_LOAN_STATUS_OLD_ID := JSON_VALUE(PA_DATA_LOAN_STATUS, '$.loanStatusOldId');
    VL_TRIGGER_ID         := JSON_VALUE(PA_DATA_LOAN_STATUS, '$.triggerId');

      INSERT INTO SC_CREDIT.TA_LOAN_STATUS (
        FI_LOAN_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_OPERATION_ID
        ,FI_LOAN_STATUS_ID
        ,FI_LOAN_STATUS_OLD_ID
        ,FI_TRIGGER_ID
        ,FD_LOAN_STATUS_DATE
        ,FC_USER
        ,FD_CREATED_DATE
        ,FD_MODIFICATION_DATE)
      VALUES (
        VL_LOAN_ID
        ,VL_ADMIN_CENTER_ID
        ,PA_LOAN_OPERATION_ID
        ,VL_LOAN_STATUS_ID
        ,VL_LOAN_STATUS_OLD_ID
        ,VL_TRIGGER_ID
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_USER
        ,CSG_CURRENT_DATE
        ,CSG_CURRENT_DATE);

  EXCEPTION
    WHEN EXC_FOREING_KEY_VIOLATION THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_FOREING_KEY_CODE;
    PA_STATUS_MSG := CSG_FOREING_KEY_MSG || CSG_ARROW ||SQLERRM|| DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_STATUS, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_STATUS);
    WHEN EX_DUPLICATE_PK THEN
    ROLLBACK;
    PA_STATUS_CODE := CSG_PRIMARY_KEY_CODE;
    PA_STATUS_MSG := CSG_PRIMARY_KEY_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_STATUS, SQLCODE, SQLERRM,
      DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_STATUS);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_INSERT_LOAN_STATUS, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN_STATUS);
  END SP_INS_LOAN_STATUS;

  PROCEDURE SP_UPD_LOAN (
    PA_DATA_LOAN    IN CLOB
    ,PA_STATUS_CODE OUT NUMBER
    ,PA_STATUS_MSG  OUT VARCHAR2)
  IS
/* **************************************************************
* PROJECT: NCP-OUTSTANDING BALANCE
* DESCRIPTION: PROCEDURE THAT UPDATE THE LOAN STATUS, SEQUENCE AND PRINCIPAL BALANCE OF THE LOAN.
************************************************************** */
  -- CONSTANTS
  CSL_UPDATE_FAILED_CODE    CONSTANT SIMPLE_INTEGER := -20304;
  CSL_UPDATE_FAILED_MSG     CONSTANT VARCHAR2(50) := 'FAILED TO UPDATE';
  CSL_UPDATE_LOAN           CONSTANT VARCHAR2(50) := 'SP_UPD_LOAN';
  -- EXCEPTIONS
  EXC_UPDATE_FAILED         EXCEPTION;
  PRAGMA EXCEPTION_INIT(EXC_UPDATE_FAILED, CSL_UPDATE_FAILED_CODE);
  -- VARIABLES
  VL_NEW_BALANCE_SEQ        NUMBER(5);

  BEGIN
    FOR JSON_REC IN (
      SELECT
        FI_LOAN_ID
        ,FI_ADMIN_CENTER_ID
        ,FI_LOAN_STATUS_ID
        ,FN_PRINCIPAL_BALANCE
      FROM JSON_TABLE (
        PA_DATA_LOAN
        ,'$[*]'
      COLUMNS (
        FI_LOAN_ID            NUMBER(15) PATH '$.loanId'
        ,FI_ADMIN_CENTER_ID   NUMBER(5) PATH '$.adminCenterId'
        ,FI_LOAN_STATUS_ID    NUMBER(5) PATH '$.loanStatusId'
        ,FN_PRINCIPAL_BALANCE NUMBER(12,2) PATH '$.principalBalance')))
      LOOP
      SELECT NVL(MAX(FI_CURRENT_BALANCE_SEQ), CSG_ZERO) + CSG_ONE
        INTO VL_NEW_BALANCE_SEQ
        FROM SC_CREDIT.TA_LOAN
        WHERE FI_LOAN_ID = JSON_REC.FI_LOAN_ID
        AND FI_ADMIN_CENTER_ID = JSON_REC.FI_ADMIN_CENTER_ID;
      UPDATE SC_CREDIT.TA_LOAN
        SET FI_LOAN_STATUS_ID = JSON_REC.FI_LOAN_STATUS_ID
        ,FI_CURRENT_BALANCE_SEQ = VL_NEW_BALANCE_SEQ
        ,FD_LOAN_STATUS_DATE = CSG_CURRENT_DATE
        ,FN_PRINCIPAL_BALANCE = JSON_REC.FN_PRINCIPAL_BALANCE
        ,FD_MODIFICATION_DATE = CSG_CURRENT_DATE
        WHERE FI_LOAN_ID = JSON_REC.FI_LOAN_ID
        AND FI_ADMIN_CENTER_ID = JSON_REC.FI_ADMIN_CENTER_ID;

      IF SQL%ROWCOUNT = CSG_ZERO THEN
        RAISE EXC_UPDATE_FAILED;
      END IF;
      END LOOP;

    PA_STATUS_CODE := CSG_SUCCESS_CODE;
    PA_STATUS_MSG := CSG_SUCCESS_MSG;
  EXCEPTION
    WHEN EXC_UPDATE_FAILED THEN
    ROLLBACK;
      PA_STATUS_CODE := CSL_UPDATE_FAILED_CODE;
      PA_STATUS_MSG := CSL_UPDATE_FAILED_MSG || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_UPDATE_LOAN, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN);
    WHEN OTHERS THEN
    ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSG_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      SC_CREDIT.SP_ERROR_LOG(CSL_UPDATE_LOAN, SQLCODE, SQLERRM,
        DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, CSG_X, PA_DATA_LOAN);
  END SP_UPD_LOAN;
  END PA_EXE_LOAN_DISBURSEMENT;

/


GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT TO USRPURPOSEWS
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.PA_EXE_LOAN_DISBURSEMENT TO USRPURPOSEWS
/
