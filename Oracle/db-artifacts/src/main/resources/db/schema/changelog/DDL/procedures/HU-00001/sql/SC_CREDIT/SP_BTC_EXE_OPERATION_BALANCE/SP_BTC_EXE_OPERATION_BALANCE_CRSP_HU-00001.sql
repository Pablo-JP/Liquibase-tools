CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_EXE_OPERATION_BALANCE 
   (PREC_LOANS                     IN SC_CREDIT.TYP_REC_BTC_LOAN
   ,PTAB_OPERATIONS                IN SC_CREDIT.TYP_TAB_BTC_OPERATION
   ,PTAB_OPERATIONS_DETAIL         IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PTAB_BALANCES                  IN SC_CREDIT.TYP_TAB_BTC_BALANCE
   ,PTAB_BALANCES_DETAIL           IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PA_DEVICE                      IN SC_CREDIT.TA_LOAN_OPERATION.FC_DEVICE%TYPE
   ,PA_GPS_LATITUDE                IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LATITUDE%TYPE
   ,PA_GPS_LONGITUDE               IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LONGITUDE%TYPE
   ,PA_COMMIT                      IN NUMBER
   ,PA_STATUS_CODE                 OUT NUMBER
   ,PA_STATUS_MSG                  OUT VARCHAR2)
IS
   ----------------------------------------------------------------------
   -- PROJECT: LOAN LIFE CYCLE
   -- CREATOR: Eduardo Cervantes Hernandez
   -- CREATED DATE:   24/10/2024
   -- DESCRIPTION: Insert Operation
   -- APPLICATION:  Process Batch of Purpose
   -- MODIFICATION DATE: 26/12/2024
   -- PERFORMANCE MODIFICATIONS - LUIS RAMIREZ
   ----------------------------------------------------------------------
   --CONSTANTS
   CSL_0                              CONSTANT SIMPLE_INTEGER := 0;
   CSL_1                              CONSTANT SIMPLE_INTEGER := 1;
   CSL_SP                             CONSTANT SIMPLE_INTEGER := 1;

   --CONSTANTS SUCCESS
   CSL_SUCCESS_CODE                   CONSTANT SIMPLE_INTEGER := 0;
   CSL_SUCCESS_MSG                    CONSTANT VARCHAR2(7) := 'SUCCESS';
   CSL_DATE_FORMAT                    CONSTANT VARCHAR2(21) := 'MM/DD/YYYY hh24:mi:ss';

   --CONSTANTS ERRORS
   CSL_CODE_ERROR                     CONSTANT SIMPLE_INTEGER := -20012;

    --CONSTANTS MESSAGES
   CSL_NOT_UPDATED                    CONSTANT VARCHAR2(15) := 'NOT UPDATED - ';
   CSL_NOT_INSERT                     CONSTANT VARCHAR2(13) := 'NOT INSERT - ';
   CSL_TA_LOAN                        CONSTANT VARCHAR2(7) := 'TA_LOAN';
   CSL_TA_LOAN_OPERATION              CONSTANT VARCHAR2(17) := 'TA_LOAN_OPERATION';
   CSL_TA_LOAN_OPERATION_DETAIL       CONSTANT VARCHAR2(24) := 'TA_LOAN_OPERATION_DETAIL';
   CSL_TA_LOAN_BALANCE                CONSTANT VARCHAR2(15) := 'TA_LOAN_BALANCE';
   CSL_TA_LOAN_BALANCE_DETAIL         CONSTANT VARCHAR2(22) := 'TA_LOAN_BALANCE_DETAIL';
   CSL_ERROR_LOAN                     CONSTANT VARCHAR2(17) := 'Loan is not found';
   CSL_ERROR_SEQ                      CONSTANT VARCHAR2(35) := 'I cant update same balance sequence';
   CSL_ARROW                          CONSTANT VARCHAR2(5) := ' -> ';
   CSL_COMMA                          CONSTANT VARCHAR2(5) := ' , ';

   --VARIABLES
   VL_CURRENT_BALANCE_SEQ             SC_CREDIT.TA_LOAN.FI_CURRENT_BALANCE_SEQ%TYPE := 0;
   VL_TRANSACTION                     SC_CREDIT.TA_LOAN_OPERATION.FI_TRANSACTION%TYPE := 0;

   --EXCEPTIONS
   EXC_BULK_ERRORS EXCEPTION;
   PRAGMA EXCEPTION_INIT(EXC_BULK_ERRORS, -24381);

BEGIN
   PA_STATUS_CODE := CSL_SUCCESS_CODE;
   PA_STATUS_MSG := CSL_SUCCESS_MSG;
   VL_TRANSACTION := NVL(PREC_LOANS.FI_TRANSACTION, CSL_0);

   <<selectLoan>>
   BEGIN
      SELECT LO.FI_CURRENT_BALANCE_SEQ  AS FI_CURRENT_BALANCE_SEQ
        INTO VL_CURRENT_BALANCE_SEQ
        FROM SC_CREDIT.TA_LOAN LO
       WHERE LO.FI_LOAN_ID = PREC_LOANS.FI_LOAN_ID
         AND LO.FI_ADMIN_CENTER_ID = PREC_LOANS.FI_ADMIN_CENTER_ID;
   EXCEPTION
      WHEN NO_DATA_FOUND THEN
         RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_ERROR_LOAN);
   END;

   --Validate Sequence
   IF VL_CURRENT_BALANCE_SEQ >= PREC_LOANS.FI_CURRENT_BALANCE_SEQ THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_ERROR_SEQ);
   END IF;

   --Update in the table TA_LOAN
   UPDATE SC_CREDIT.TA_LOAN LO
      SET LO.FN_PRINCIPAL_BALANCE = NVL(PREC_LOANS.FN_PRINCIPAL_BALANCE,LO.FN_PRINCIPAL_BALANCE)
         ,LO.FN_FINANCE_CHARGE_BALANCE = NVL(PREC_LOANS.FN_FINANCE_CHARGE_BALANCE,LO.FN_FINANCE_CHARGE_BALANCE)
         ,LO.FN_ADDITIONAL_CHARGE_BALANCE = NVL(PREC_LOANS.FN_ADDITIONAL_CHARGE_BALANCE,LO.FN_ADDITIONAL_CHARGE_BALANCE)
         ,LO.FI_ADDITIONAL_STATUS = NVL(PREC_LOANS.FI_ADDITIONAL_STATUS,LO.FI_ADDITIONAL_STATUS)
         ,LO.FI_CURRENT_BALANCE_SEQ = PREC_LOANS.FI_CURRENT_BALANCE_SEQ
         ,LO.FI_LOAN_STATUS_ID = NVL(PREC_LOANS.FI_LOAN_STATUS_ID,LO.FI_LOAN_STATUS_ID)
         ,LO.FD_LOAN_STATUS_DATE = NVL(TO_DATE(PREC_LOANS.FC_LOAN_STATUS_DATE, CSL_DATE_FORMAT),LO.FD_LOAN_STATUS_DATE)
         ,LO.FC_USER = USER
         ,LO.FD_MODIFICATION_DATE = SYSDATE
   WHERE LO.FI_LOAN_ID = PREC_LOANS.FI_LOAN_ID
     AND LO.FI_ADMIN_CENTER_ID = PREC_LOANS.FI_ADMIN_CENTER_ID;

   IF SQL%ROWCOUNT = CSL_0 THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_NOT_UPDATED || CSL_TA_LOAN);
   END IF;

   --Insert in OPERATION
   FORALL B IN PTAB_OPERATIONS.FIRST .. PTAB_OPERATIONS.LAST SAVE EXCEPTIONS
      INSERT INTO SC_CREDIT.TA_LOAN_OPERATION
         (FI_LOAN_OPERATION_ID
         ,FI_COUNTRY_ID
         ,FI_COMPANY_ID
         ,FI_BUSINESS_UNIT_ID
         ,FI_LOAN_ID
         ,FI_ADMIN_CENTER_ID
         ,FI_OPERATION_TYPE_ID
         ,FI_TRANSACTION
         ,FN_OPERATION_AMOUNT
         ,FD_APPLICATION_DATE
         ,FD_OPERATION_DATE
         ,FI_STATUS
         ,FC_END_USER
         ,FC_UUID_TRACKING
         ,FC_GPS_LATITUDE
         ,FC_GPS_LONGITUDE
         ,FC_DEVICE
         ,FC_USER
         ,FD_CREATED_DATE
         ,FD_MODIFICATION_DATE)
      VALUES (
         PTAB_OPERATIONS(B).FI_LOAN_OPERATION_ID
         ,PTAB_OPERATIONS(B).FI_COUNTRY_ID
         ,PTAB_OPERATIONS(B).FI_COMPANY_ID
         ,PTAB_OPERATIONS(B).FI_BUSINESS_UNIT_ID
         ,PTAB_OPERATIONS(B).FI_LOAN_ID
         ,PTAB_OPERATIONS(B).FI_ADMIN_CENTER_ID
         ,PTAB_OPERATIONS(B).FI_OPERATION_TYPE_ID
         ,VL_TRANSACTION
         ,PTAB_OPERATIONS(B).FN_OPERATION_AMOUNT
         ,TO_DATE(PTAB_OPERATIONS(B).FC_APPLICATION_DATE,CSL_DATE_FORMAT)
         ,TO_DATE(PTAB_OPERATIONS(B).FC_OPERATION_DATE,CSL_DATE_FORMAT)
         ,PTAB_OPERATIONS(B).FI_STATUS
         ,PTAB_OPERATIONS(B).FC_END_USER
         ,PTAB_OPERATIONS(B).FC_UUID_TRACKING
         ,PA_GPS_LATITUDE
         ,PA_GPS_LONGITUDE
         ,PA_DEVICE
         ,USER
         ,SYSDATE
         ,SYSDATE
      );
   IF SQL%ROWCOUNT = CSL_0 THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_NOT_INSERT || CSL_TA_LOAN_OPERATION);
   END IF;

   --Insert detail in the table OPERATION DETAIL
   FORALL C IN PTAB_OPERATIONS_DETAIL.FIRST .. PTAB_OPERATIONS_DETAIL.LAST SAVE EXCEPTIONS
   INSERT INTO SC_CREDIT.TA_LOAN_OPERATION_DETAIL
      (FI_LOAN_OPERATION_ID
      ,FI_ADMIN_CENTER_ID
      ,FI_LOAN_ID
      ,FI_LOAN_CONCEPT_ID
      ,FN_ITEM_AMOUNT
      ,FC_USER
      ,FD_CREATED_DATE
      ,FD_MODIFICATION_DATE)
   VALUES(
      PTAB_OPERATIONS_DETAIL(C).FI_LOAN_OPERATION_ID
      ,PTAB_OPERATIONS_DETAIL(C).FI_ADMIN_CENTER_ID
      ,PTAB_OPERATIONS_DETAIL(C).FI_LOAN_ID
      ,PTAB_OPERATIONS_DETAIL(C).FI_LOAN_CONCEPT_ID
      ,PTAB_OPERATIONS_DETAIL(C).FN_ITEM_AMOUNT
      ,USER
      ,SYSDATE
      ,SYSDATE
   );
   IF SQL%ROWCOUNT = CSL_0 THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_NOT_INSERT || CSL_TA_LOAN_OPERATION_DETAIL);
   END IF;

   --Insert balance in the table LOAN_BALANCE
   FORALL D IN PTAB_BALANCES.FIRST .. PTAB_BALANCES.LAST SAVE EXCEPTIONS
   INSERT INTO SC_CREDIT.TA_LOAN_BALANCE
      (FI_LOAN_BALANCE_ID
      ,FI_ADMIN_CENTER_ID
      ,FI_LOAN_ID
      ,FI_LOAN_OPERATION_ID
      ,FI_BALANCE_SEQ
      ,FN_PRINCIPAL_BALANCE
      ,FN_FINANCE_CHARGE_BALANCE
      ,FN_ADDITIONAL_CHARGE_BALANCE
      ,FC_USER
      ,FD_CREATED_DATE
      ,FD_MODIFICATION_DATE)
   VALUES (
      PTAB_BALANCES(D).FI_LOAN_BALANCE_ID
      ,PTAB_BALANCES(D).FI_ADMIN_CENTER_ID
      ,PTAB_BALANCES(D).FI_LOAN_ID
      ,PTAB_BALANCES(D).FI_LOAN_OPERATION_ID
      ,PTAB_BALANCES(D).FI_BALANCE_SEQ
      ,PTAB_BALANCES(D).FN_PRINCIPAL_BALANCE
      ,PTAB_BALANCES(D).FN_FINANCE_CHARGE_BALANCE
      ,PTAB_BALANCES(D).FN_ADDITIONAL_CHARGE_BALANCE
      ,USER
      ,SYSDATE
      ,SYSDATE
   );
   IF SQL%ROWCOUNT = CSL_0 THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_NOT_INSERT || CSL_TA_LOAN_BALANCE);
   END IF;

   --Insert the detail of balance in the table LOAN_BALANCE
   FORALL E IN PTAB_BALANCES_DETAIL.FIRST .. PTAB_BALANCES_DETAIL.LAST SAVE EXCEPTIONS
   INSERT INTO SC_CREDIT.TA_LOAN_BALANCE_DETAIL
      (FI_LOAN_BALANCE_ID
      ,FI_ADMIN_CENTER_ID
      ,FI_LOAN_ID
      ,FI_LOAN_CONCEPT_ID
      ,FN_ITEM_AMOUNT
      ,FC_USER
      ,FD_CREATED_DATE
      ,FD_MODIFICATION_DATE)
   VALUES(
       PTAB_BALANCES_DETAIL(E).FI_LOAN_OPERATION_ID
      ,PTAB_BALANCES_DETAIL(E).FI_ADMIN_CENTER_ID
      ,PTAB_BALANCES_DETAIL(E).FI_LOAN_ID
      ,PTAB_BALANCES_DETAIL(E).FI_LOAN_CONCEPT_ID
      ,PTAB_BALANCES_DETAIL(E).FN_ITEM_AMOUNT
      ,USER
      ,SYSDATE
      ,SYSDATE
      );
   IF SQL%ROWCOUNT = CSL_0 THEN
      RAISE_APPLICATION_ERROR(CSL_CODE_ERROR, CSL_NOT_INSERT || CSL_TA_LOAN_BALANCE_DETAIL);
   END IF;

   IF(PA_COMMIT = CSL_1)THEN
      COMMIT;
   END IF;

EXCEPTION
   WHEN EXC_BULK_ERRORS THEN
      -- Explicitly each exception individually by looping over SQL%BULK_EXCEPTIONS
      ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(
         UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
         ,SQLCODE
         ,SQLERRM
         ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
         ,VL_TRANSACTION
         ,PREC_LOANS.FI_ADMIN_CENTER_ID
            ||CSL_COMMA
            ||PREC_LOANS.FI_LOAN_ID
      );
   WHEN OTHERS THEN
      ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

      SC_CREDIT.SP_BATCH_ERROR_LOG(
         UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
         ,SQLCODE
         ,SQLERRM
         ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
         ,VL_TRANSACTION
         ,PREC_LOANS.FI_ADMIN_CENTER_ID
            ||CSL_COMMA
            ||PREC_LOANS.FI_LOAN_ID
      );
END SP_BTC_EXE_OPERATION_BALANCE;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_EXE_OPERATION_BALANCE TO USRNCPCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_EXE_OPERATION_BALANCE TO USRBTCCREDIT1
/
