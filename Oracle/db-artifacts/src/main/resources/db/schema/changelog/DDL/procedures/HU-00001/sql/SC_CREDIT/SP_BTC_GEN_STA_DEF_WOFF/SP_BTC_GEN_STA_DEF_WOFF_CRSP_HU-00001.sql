CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_BTC_GEN_STA_DEF_WOFF 
   (PTAB_PWO_AMOUNT_DETAIL      IN SC_CREDIT.TYP_TAB_BTC_STATUS_PWO
   ,PTAB_STATUS_DETAIL          IN SC_CREDIT.TYP_TAB_BTC_STATUS_DETAIL
   ,PTAB_STATUS                 IN SC_CREDIT.TYP_TAB_BTC_STATUS
   ,PTAB_LOANS                  IN SC_CREDIT.TYP_TAB_BTC_LOAN
   ,PTAB_OPERATIONS             IN SC_CREDIT.TYP_TAB_BTC_OPERATION
   ,PTAB_OPERATIONS_DETAIL      IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PTAB_BALANCES               IN SC_CREDIT.TYP_TAB_BTC_BALANCE
   ,PTAB_BALANCES_DETAIL        IN SC_CREDIT.TYP_TAB_BTC_DETAIL
   ,PA_DEVICE                   IN SC_CREDIT.TA_LOAN_OPERATION.FC_DEVICE%TYPE
   ,PA_GPS_LATITUDE             IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LATITUDE%TYPE
   ,PA_GPS_LONGITUDE            IN SC_CREDIT.TA_LOAN_OPERATION.FC_GPS_LONGITUDE%TYPE
   ,PA_STATUS_CODE              OUT NUMBER
   ,PA_STATUS_MSG               OUT VARCHAR2
   ,PA_RECORDS_READ             OUT NUMBER
   ,PA_RECORDS_SUCCESS          OUT NUMBER

   ,PA_RECORDS_ERROR            OUT NUMBER
   ,PTAB_ERROR_RECORDS          OUT SC_CREDIT.TYP_TAB_BTC_ERROR
   )
IS

 /* **************************************************************
  * DESCRIPTION: PROCESS TO INSERT IN TABLE LOAN_STATUS_DETAIL,LOAN,STATUS,LOAN_OPERATION,TA_PWO_AMOUNT_DETAIL
               LOAN_BALANCE
  * CREATOR: IVAN LOPEZ
  * CREATED DATE:       15/11/2024
  * MODIFICATION DATE:  09/01/2025
  * USER MODIFICATION:  AIXA SARMIENTO
************************************************************** */
   --CONSTANTS
   CSL_0                  CONSTANT SIMPLE_INTEGER := 0;
   CSL_1                  CONSTANT SIMPLE_INTEGER := 1;
   CSL_6                  CONSTANT SIMPLE_INTEGER := 6;
   CSL_4                  CONSTANT SIMPLE_INTEGER := 4;
   CSL_PKG                CONSTANT SIMPLE_INTEGER := 1;

   --CONSTANTS SUCCESS
   CSL_SUCCESS_CODE       CONSTANT SIMPLE_INTEGER := 0;
   CSL_SUCCESS_MSG        CONSTANT VARCHAR2(10)   := 'SUCCESS';
   CSL_NUMERROR           CONSTANT SIMPLE_INTEGER := -20012;
   CSL_SPACE              CONSTANT VARCHAR2(2)    := ' ';
   CSL_SUCCESS_ERROR      CONSTANT VARCHAR2(30)   := 'SUCCESS, WITH ERRORS RECORDS';
   CSL_TYPE_NULL          CONSTANT VARCHAR2(15)   := 'TYPE PWO NULL';
   CSL_DATE_FORMAT        CONSTANT VARCHAR2(40)   := 'MM/DD/YYYY hh24:mi:ss';
   CSL_ARROW              CONSTANT VARCHAR2(5)    := ' -> ';
   VL_DASH                CONSTANT VARCHAR2(5)    :=  '-';
   VL_STATUS_CODE         NUMBER(10,0) := 0;
   VL_STATUS_MSG          VARCHAR2(1000);
   VL_PROCESS_DESC        VARCHAR2(150);
   VL_I                   NUMBER(10,0) := 0;
   CSL_DAY                CONSTANT DATE:= SYSDATE;
   --VARIABLES INTERNAL TYPES ASSIGNMENT
   VL_TAB_ERRORS             SC_CREDIT.TYP_TAB_BTC_ERROR;
   VL_TAB_LOANS              SC_CREDIT.TYP_TAB_BTC_LOAN;
   VL_TAB_OPERATIONS         SC_CREDIT.TYP_TAB_BTC_OPERATION;
   VL_TAB_OPERATIONS_DETAIL  SC_CREDIT.TYP_TAB_BTC_DETAIL;
   VL_TAB_BALANCES           SC_CREDIT.TYP_TAB_BTC_BALANCE;
   VL_TAB_BALANCES_DETAIL    SC_CREDIT.TYP_TAB_BTC_DETAIL;

      --VARIABLES OF ITERATION BY LOAN
   VL_REC_LOAN                        SC_CREDIT.TYP_REC_BTC_LOAN;
   VL_TAB_OPERATIONS_BY_LOAN          SC_CREDIT.TYP_TAB_BTC_OPERATION;
   VL_TAB_OPERATIONS_DET_BY_LOAN      SC_CREDIT.TYP_TAB_BTC_DETAIL;
   VL_TAB_BALANCES_BY_LOAN            SC_CREDIT.TYP_TAB_BTC_BALANCE;
   VL_TAB_BALANCES_DET_BY_LOAN        SC_CREDIT.TYP_TAB_BTC_DETAIL;

   VL_DESC_COUNT                     VARCHAR2(500);

BEGIN
   PA_STATUS_CODE := CSL_SUCCESS_CODE;
   PA_STATUS_MSG := CSL_SUCCESS_MSG;
   PA_RECORDS_SUCCESS := 0;
   PA_RECORDS_ERROR := 0;
   PA_RECORDS_READ := 0;
   VL_TAB_ERRORS := SC_CREDIT.TYP_TAB_BTC_ERROR();


   IF PTAB_STATUS_DETAIL IS NULL THEN
      RAISE_APPLICATION_ERROR( CSL_NUMERROR, CSL_TYPE_NULL);
   END IF;

   VL_I := PTAB_STATUS_DETAIL.FIRST;
   PA_RECORDS_READ := PTAB_STATUS_DETAIL.COUNT;

--INTERNAL TYPES ASSIGNMENT
   VL_TAB_LOANS             := SC_CREDIT.TYP_TAB_BTC_LOAN();
   VL_TAB_LOANS             := PTAB_LOANS;
   VL_TAB_OPERATIONS        := SC_CREDIT.TYP_TAB_BTC_OPERATION();
   VL_TAB_OPERATIONS        := PTAB_OPERATIONS;
   VL_TAB_OPERATIONS_DETAIL := SC_CREDIT.TYP_TAB_BTC_DETAIL();
   VL_TAB_OPERATIONS_DETAIL := PTAB_OPERATIONS_DETAIL;
   VL_TAB_BALANCES          := SC_CREDIT.TYP_TAB_BTC_BALANCE();
   VL_TAB_BALANCES          := PTAB_BALANCES;
   VL_TAB_BALANCES_DETAIL   := SC_CREDIT.TYP_TAB_BTC_DETAIL();
   VL_TAB_BALANCES_DETAIL   := PTAB_BALANCES_DETAIL;

   WHILE (VL_I IS NOT NULL) LOOP
      BEGIN

         VL_TAB_OPERATIONS_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_OPERATION();
         VL_TAB_OPERATIONS_DET_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_DETAIL();
         VL_TAB_BALANCES_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_BALANCE();
         VL_TAB_BALANCES_DET_BY_LOAN := SC_CREDIT.TYP_TAB_BTC_DETAIL();


		 --TAB BY LOAN ASSIGNMENT
		 <<loopLoanAssignment>>
		 WHILE VL_TAB_LOANS.COUNT > CSL_0 AND PTAB_STATUS_DETAIL.EXISTS(VL_I) LOOP
		    IF VL_TAB_LOANS(VL_TAB_LOANS.FIRST).FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID AND
		       VL_TAB_LOANS(VL_TAB_LOANS.FIRST).FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID THEN --

		          VL_REC_LOAN := VL_TAB_LOANS(VL_TAB_LOANS.FIRST);
		          VL_TAB_LOANS.DELETE(VL_TAB_LOANS.FIRST);
		    ELSE
		       EXIT loopLoanAssignment;
		    END IF;
		 END LOOP loopLoanAssignment;

            --TAB BY OPERATION ASSIGNMENT
		 <<loopOperationAssignment>>
		 WHILE VL_TAB_OPERATIONS.COUNT > CSL_0 AND PTAB_STATUS_DETAIL.EXISTS(VL_I) LOOP
		    IF VL_TAB_OPERATIONS(VL_TAB_OPERATIONS.FIRST).FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID AND
		       VL_TAB_OPERATIONS(VL_TAB_OPERATIONS.FIRST).FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID THEN

		          VL_TAB_OPERATIONS_BY_LOAN.EXTEND;
		          VL_TAB_OPERATIONS_BY_LOAN(VL_TAB_OPERATIONS_BY_LOAN.LAST) := VL_TAB_OPERATIONS(VL_TAB_OPERATIONS.FIRST);
		          VL_TAB_OPERATIONS.DELETE(VL_TAB_OPERATIONS.FIRST);
		    ELSE
		       EXIT loopOperationAssignment;
		    END IF;
		 END LOOP loopOperationAssignment;

		    --TAB BY OPERATION DET ASSIGNMENT
		 <<loopOperationDetAssignment>>
		 WHILE VL_TAB_OPERATIONS_DETAIL.COUNT > CSL_0 AND PTAB_STATUS_DETAIL.EXISTS(VL_I) LOOP
		    IF VL_TAB_OPERATIONS_DETAIL(VL_TAB_OPERATIONS_DETAIL.FIRST).FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID AND
		       VL_TAB_OPERATIONS_DETAIL(VL_TAB_OPERATIONS_DETAIL.FIRST).FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID THEN

		          VL_TAB_OPERATIONS_DET_BY_LOAN.EXTEND;
		          VL_TAB_OPERATIONS_DET_BY_LOAN(VL_TAB_OPERATIONS_DET_BY_LOAN.LAST) := VL_TAB_OPERATIONS_DETAIL(VL_TAB_OPERATIONS_DETAIL.FIRST);
		          VL_TAB_OPERATIONS_DETAIL.DELETE(VL_TAB_OPERATIONS_DETAIL.FIRST);
		    ELSE
		       EXIT loopOperationDetAssignment;
		    END IF;
		 END LOOP loopOperationDetAssignment;

		    --TAB BY BALANCES ASSIGNMENT
		 <<loopBalanceAssignment>>
		 WHILE VL_TAB_BALANCES.COUNT > CSL_0 AND PTAB_STATUS_DETAIL.EXISTS(VL_I) LOOP
		    IF VL_TAB_BALANCES(VL_TAB_BALANCES.FIRST).FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID AND
		       VL_TAB_BALANCES(VL_TAB_BALANCES.FIRST).FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID THEN

		          VL_TAB_BALANCES_BY_LOAN.EXTEND;
		          VL_TAB_BALANCES_BY_LOAN(VL_TAB_BALANCES_BY_LOAN.LAST) := VL_TAB_BALANCES(VL_TAB_BALANCES.FIRST);
		          VL_TAB_BALANCES.DELETE(VL_TAB_BALANCES.FIRST);
		    ELSE
		       EXIT loopBalanceAssignment;
		    END IF;
		 END LOOP loopBalanceAssignment;

		    --TAB BY BALANCES DET ASSIGNMENT
		 <<loopBalanceDetAssignment>>
		 WHILE VL_TAB_BALANCES_DETAIL.COUNT > CSL_0 AND PTAB_STATUS_DETAIL.EXISTS(VL_I) LOOP
		    IF VL_TAB_BALANCES_DETAIL(VL_TAB_BALANCES_DETAIL.FIRST).FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID AND
		       VL_TAB_BALANCES_DETAIL(VL_TAB_BALANCES_DETAIL.FIRST).FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID THEN

		          VL_TAB_BALANCES_DET_BY_LOAN.EXTEND;
		          VL_TAB_BALANCES_DET_BY_LOAN(VL_TAB_BALANCES_DET_BY_LOAN.LAST) := VL_TAB_BALANCES_DETAIL(VL_TAB_BALANCES_DETAIL.FIRST);
		          VL_TAB_BALANCES_DETAIL.DELETE(VL_TAB_BALANCES_DETAIL.FIRST);
		    ELSE
		       EXIT loopBalanceDetAssignment;
		    END IF;
		 END LOOP loopBalanceDetAssignment;

		 IF PTAB_STATUS_DETAIL(VL_I).FI_LOAN_STATUS_ID = CSL_6 THEN

		    VL_PROCESS_DESC := 'SP_BTC_INS_LOAN_STATUS_DETAIL';
		    SC_CREDIT.SP_BTC_INS_LOAN_STATUS_DETAIL
		        (PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID
		        ,PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
		        ,PTAB_STATUS_DETAIL(VL_I).FI_LOAN_STATUS_ID
		        ,PTAB_STATUS_DETAIL(VL_I).FI_ACTION_DETAIL_ID
		        ,PTAB_STATUS_DETAIL(VL_I).FI_COUNTER_DAY
		        ,PTAB_STATUS_DETAIL(VL_I).FD_INITIAL_DATE
		        ,PTAB_STATUS_DETAIL(VL_I).FI_PAYMENT_NUMBER_ID
		        ,PTAB_STATUS_DETAIL(VL_I).FD_FINAL_DATE
		        ,PTAB_STATUS_DETAIL(VL_I).FI_ON_OFF
		        ,CSL_0
		        ,VL_STATUS_CODE
		        ,VL_STATUS_MSG);

		    IF(VL_STATUS_CODE != CSL_0)THEN
		        RAISE_APPLICATION_ERROR( CSL_NUMERROR, VL_PROCESS_DESC || CSL_SPACE || VL_STATUS_MSG);
		    END IF;

		    VL_PROCESS_DESC := 'SP_BTC_EXE_OPERATION_BALANCE';
		    SC_CREDIT.SP_BTC_EXE_OPERATION_BALANCE
		        (VL_REC_LOAN
		        ,VL_TAB_OPERATIONS_BY_LOAN
		        ,VL_TAB_OPERATIONS_DET_BY_LOAN
		        ,VL_TAB_BALANCES_BY_LOAN
		        ,VL_TAB_BALANCES_DET_BY_LOAN
		        ,PA_DEVICE
		        ,PA_GPS_LATITUDE
		        ,PA_GPS_LONGITUDE
		        ,CSL_0
		        ,VL_STATUS_CODE
		        ,VL_STATUS_MSG);

		    IF(VL_STATUS_CODE != CSL_0)THEN
		        RAISE_APPLICATION_ERROR( CSL_NUMERROR, VL_PROCESS_DESC || CSL_SPACE || VL_STATUS_MSG);
		    END IF;

		    VL_PROCESS_DESC := 'SP_BTC_INS_LOAN_STATUS';
		    SC_CREDIT.SP_BTC_INS_LOAN_STATUS
		        (PTAB_STATUS(VL_I).FI_LOAN_ID
		        ,PTAB_STATUS(VL_I).FI_ADMIN_CENTER_ID
		        ,PTAB_STATUS(VL_I).FI_LOAN_OPERATION_ID
		        ,PTAB_STATUS(VL_I).FI_LOAN_STATUS_ID
		        ,PTAB_STATUS(VL_I).FI_LOAN_STATUS_OLD_ID
		        ,PTAB_STATUS(VL_I).FI_TRIGGER_ID
		        ,PTAB_STATUS(VL_I).FD_LOAN_STATUS_DATE
		        ,CSL_1
		        ,CSL_0
		        ,VL_STATUS_CODE
		        ,VL_STATUS_MSG);

		    IF(VL_STATUS_CODE != CSL_0)THEN
		        RAISE_APPLICATION_ERROR( CSL_NUMERROR, VL_PROCESS_DESC || CSL_SPACE || VL_STATUS_MSG);
		    END IF;

		 ELSE

		    IF PTAB_PWO_AMOUNT_DETAIL(VL_I).FI_LOAN_ID != CSL_0 THEN
               VL_PROCESS_DESC := 'SP_BTC_INS_PWO_AMOUNT_DETAIL';
               SC_CREDIT.SP_BTC_INS_PWO_AMOUNT_DETAIL(
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FI_LOAN_ID,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FI_ADMIN_CENTER_ID,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FN_PAY_OFF_AMOUNT,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FN_PWO_EXT_PAYMENT,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FN_AMOUNT_PAID,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FN_PWO_MIN_PAYMENT,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FI_ADD_EXTENSION,
                  PTAB_PWO_AMOUNT_DETAIL(VL_I).FD_PWO_DATE,
                  CSL_0,
                  VL_STATUS_CODE,
                  VL_STATUS_MSG);

                  IF(VL_STATUS_CODE != CSL_0)THEN
                     RAISE_APPLICATION_ERROR( CSL_NUMERROR, VL_PROCESS_DESC || CSL_SPACE || VL_STATUS_MSG);
                  END IF;
		    END IF;

		    UPDATE SC_CREDIT.TA_LOAN_STATUS_DETAIL LD
               SET LD.FD_FINAL_DATE = TO_DATE(PTAB_STATUS_DETAIL(VL_I).FD_FINAL_DATE,CSL_DATE_FORMAT)
                  ,LD.FD_MODIFICATION_DATE = CSL_DAY
		     WHERE LD.FI_LOAN_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID
               AND LD.FI_ADMIN_CENTER_ID = PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
               AND LD.FI_LOAN_STATUS_ID = PTAB_STATUS_DETAIL(VL_I).FI_LOAN_STATUS_ID
               AND LD.FI_ACTION_DETAIL_ID = PTAB_STATUS_DETAIL(VL_I).FI_ACTION_DETAIL_ID
               AND LD.FI_ON_OFF=CSL_1;

		 END IF;

         --DELETE TYPES BY LOAN (CYCLE)
		 VL_TAB_OPERATIONS_BY_LOAN.DELETE;
         VL_TAB_OPERATIONS_DET_BY_LOAN.DELETE;
         VL_TAB_BALANCES_BY_LOAN.DELETE;
         VL_TAB_BALANCES_DET_BY_LOAN.DELETE;

         PA_RECORDS_SUCCESS := PA_RECORDS_SUCCESS + CSL_1;

         --EXCEPTION
      EXCEPTION
         WHEN OTHERS THEN
            ROLLBACK;
               SC_CREDIT.SP_BATCH_ERROR_LOG(UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_PKG)
                                           ,SQLCODE
                                           ,SQLERRM
                                           ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                           ,CSL_1
                                           ,PTAB_OPERATIONS(VL_I).FI_LOAN_ID ||VL_DASH || PTAB_OPERATIONS(VL_I).FI_ADMIN_CENTER_ID || VL_DASH || PTAB_OPERATIONS(VL_I).FI_LOAN_OPERATION_ID);

               PA_RECORDS_ERROR :=PA_RECORDS_ERROR + CSL_1;

               VL_TAB_ERRORS.EXTEND;
               VL_TAB_ERRORS(VL_TAB_ERRORS.LAST) :=
               SC_CREDIT.TYP_REC_BTC_ERROR(PTAB_STATUS_DETAIL(VL_I).FI_ADMIN_CENTER_ID
                                          ,PTAB_STATUS_DETAIL(VL_I).FI_LOAN_ID
                                          ,UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_PKG)
                                          ,SQLCODE
                                          ,SQLERRM
                                          ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                                          ,SYSDATE
                                          ,CSL_1
                                          ,NULL);
      END;
      VL_I := PTAB_STATUS_DETAIL.NEXT(VL_I);
      COMMIT;
   END LOOP;

   VL_DESC_COUNT := ' TAB_LOANS '||VL_TAB_LOANS.COUNT
                  ||' TAB_OPERATIONS '||VL_TAB_OPERATIONS.COUNT
                  ||' TAB_OPERATIONS_DETAIL '||VL_TAB_OPERATIONS_DETAIL.COUNT
                  ||' TAB_BALANCES '||VL_TAB_BALANCES.COUNT
                  ||' TAB_BALANCES_DETAIL '||VL_TAB_BALANCES_DETAIL.COUNT;

   --DELETE TYPES INTERNS
   VL_TAB_LOANS.DELETE;
   VL_TAB_OPERATIONS.DELETE;
   VL_TAB_OPERATIONS_DETAIL.DELETE;
   VL_TAB_BALANCES.DELETE;
   VL_TAB_BALANCES_DETAIL.DELETE;

   PTAB_ERROR_RECORDS := VL_TAB_ERRORS;
   IF(PA_RECORDS_ERROR > CSL_0)THEN
      PA_STATUS_CODE := CSL_1;
      PA_STATUS_MSG := CSL_SUCCESS_ERROR;
   END IF;

   PA_STATUS_MSG := PA_STATUS_MSG
      || ' ' || VL_DESC_COUNT;

EXCEPTION
   WHEN OTHERS THEN
      PA_STATUS_CODE := SQLCODE;
      PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

   SC_CREDIT.SP_BATCH_ERROR_LOG(UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_PKG)
                               ,SQLCODE
                               ,SQLERRM
                               ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
                               ,CSL_0
                               ,PTAB_OPERATIONS(VL_I).FI_LOAN_ID ||VL_DASH || PTAB_OPERATIONS(VL_I).FI_ADMIN_CENTER_ID || VL_DASH || PTAB_OPERATIONS(VL_I).FI_LOAN_OPERATION_ID);
END SP_BTC_GEN_STA_DEF_WOFF;

/

GRANT EXECUTE ON SC_CREDIT.SP_BTC_GEN_STA_DEF_WOFF TO USRBTCCREDIT1
/
GRANT EXECUTE ON SC_CREDIT.SP_BTC_GEN_STA_DEF_WOFF TO USRNCPCREDIT1
/
