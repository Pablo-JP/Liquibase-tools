CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_UPD_PAYMENT_SCHEDULE_PAYOFF (
    PA_LOAN_ID           SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_LOAN_ID%TYPE,
    PA_ADMIN_CENTER_ID   SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_ADMIN_CENTER_ID%TYPE,
    PA_PAYMENT_NUMBER_ID SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_PAYMENT_NUMBER_ID%TYPE,
    PA_STATUS            SC_CREDIT.TA_PAYMENT_SCHEDULE.FI_PMT_SCHEDULE_STATUS_ID%TYPE,
    PA_PAYMENT_BALANCE   SC_CREDIT.TA_PAYMENT_SCHEDULE.FN_PAYMENT_BALANCE%TYPE,
    PA_PAYMENT_DATE      VARCHAR2,
    PA_STATUS_MSG        OUT VARCHAR2,
    PA_STATUS_CODE       OUT NUMBER
)
IS
 /* ****************************************************************
 * PROJECT: CORE LOAN
 * DESCRIPTION: PROCEDURE FOR UPDATING PAYOFF INFORMATION
 *              TABLE: TA_PAYMENT_SCHEDULE
 * PRECONDITIONS: PRE-EXISTING LOANS
 * CREATED DATE: 19/11/2024
 * CREATOR: J. GILBERTO CHAVEZ MUNOZ
 * MODIFICATION: 2025-01-20 CESAR SANCHEZ HERNANDEZ
 * [NCPRDC-5152 V2.0.0]
 *****************************************************************/
  CSL_0             CONSTANT SIMPLE_INTEGER := 0;
  CSL_1             CONSTANT SIMPLE_INTEGER := 1;
  CSL_2             CONSTANT SIMPLE_INTEGER := 2;
  CSL_6             CONSTANT SIMPLE_INTEGER := 6;
  CSL_SP            CONSTANT SIMPLE_INTEGER := 1;
  CSL_200           CONSTANT SIMPLE_INTEGER := 200;
  CSL_404           CONSTANT SIMPLE_INTEGER := 404;
  CSL_ARROW         CONSTANT VARCHAR2(5) := '->';
  CSL_JSON          CONSTANT VARCHAR2(5) := NULL;
  CSL_UUID_TRACKING CONSTANT VARCHAR2(5) := NULL;
  CSL_SUCCESS       CONSTANT VARCHAR2(8) := 'OK';
  CSL_FAILURE       CONSTANT VARCHAR2(100) := 'Cannot apply payment because it was in payoff status';
  VL_NUMBER_OF_ROWS       NUMBER;
  VL_TOTAL_NUMBER_OF_ROWS NUMBER;
BEGIN
  PA_STATUS_CODE := CSL_0;
  PA_STATUS_MSG  := CSL_SUCCESS;

SELECT MAX(FI_PAYMENT_NUMBER_ID)
INTO   VL_TOTAL_NUMBER_OF_ROWS
FROM   SC_CREDIT.TA_PAYMENT_SCHEDULE
WHERE  FI_LOAN_ID = PA_LOAN_ID
  AND    FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
;

IF PA_PAYMENT_NUMBER_ID <= VL_TOTAL_NUMBER_OF_ROWS THEN
SELECT COUNT(FI_LOAN_ID)
INTO   VL_NUMBER_OF_ROWS
FROM   SC_CREDIT.TA_PAYMENT_SCHEDULE
WHERE  FI_LOAN_ID = PA_LOAN_ID
  AND    FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
  AND    FI_PAYMENT_NUMBER_ID <= PA_PAYMENT_NUMBER_ID
  AND   FI_PMT_SCHEDULE_STATUS_ID IN (CSL_1, CSL_2)
;

IF VL_NUMBER_OF_ROWS <> 0 THEN
UPDATE SC_CREDIT.TA_PAYMENT_SCHEDULE
SET    FI_PMT_SCHEDULE_STATUS_ID = PA_STATUS,
       FD_MODIFICATION_DATE = SYSDATE,
       FN_PAYMENT_BALANCE = PA_PAYMENT_BALANCE,
       FD_PAYMENT_DATE = TO_DATE(PA_PAYMENT_DATE, 'dd/MM/yy')
WHERE  FI_LOAN_ID = PA_LOAN_ID
  AND    FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
  AND    FI_PAYMENT_NUMBER_ID <= PA_PAYMENT_NUMBER_ID
  AND    FI_PMT_SCHEDULE_STATUS_ID IN (CSL_1, CSL_2)
;

SELECT COUNT(FI_LOAN_ID)
INTO   VL_NUMBER_OF_ROWS
FROM   SC_CREDIT.TA_PAYMENT_SCHEDULE
WHERE  FI_LOAN_ID = PA_LOAN_ID
  AND    FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
  AND    FI_PAYMENT_NUMBER_ID > PA_PAYMENT_NUMBER_ID
  AND    FI_PMT_SCHEDULE_STATUS_ID IN (CSL_1, CSL_2)
;

IF VL_NUMBER_OF_ROWS <> 0 THEN
UPDATE SC_CREDIT.TA_PAYMENT_SCHEDULE
SET    FI_PMT_SCHEDULE_STATUS_ID = CSL_6,
       FD_MODIFICATION_DATE = SYSDATE
WHERE  FI_LOAN_ID = PA_LOAN_ID
  AND    FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
  AND    FI_PAYMENT_NUMBER_ID > PA_PAYMENT_NUMBER_ID
  AND    FI_PMT_SCHEDULE_STATUS_ID IN (CSL_1, CSL_2)
;
END IF;
ELSE
      PA_STATUS_CODE := CSL_404;
      PA_STATUS_MSG  := CSL_FAILURE;
END IF;
ELSE
    PA_STATUS_CODE := CSL_404;
    PA_STATUS_MSG  := CSL_FAILURE;
END IF;

COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
    SC_CREDIT.SP_ERROR_LOG(
       UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP)
       ,SQLCODE
       ,SQLERRM
       ,DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
       ,CSL_UUID_TRACKING
       ,CSL_JSON
       );
END SP_UPD_PAYMENT_SCHEDULE_PAYOFF;

/

GRANT EXECUTE ON SC_CREDIT.SP_UPD_PAYMENT_SCHEDULE_PAYOFF TO USRNCPCREDIT1
/
