CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_SYNC_OPERATION_TYPE (
    PA_SYNC_JSON   		  CLOB,
    PA_UPDATED_ROWS	OUT NUMBER,
    PA_STATUS_CODE	OUT NUMBER,
    PA_STATUS_MSG  	OUT VARCHAR2
  ) IS
/* **************************************************************
* PROJECT: NCP
* DESCRIPTION: CATALOG SYNCHONIZATION TC_OPERATION_TYPE
* CREATED DATE: 2025/01/09
* CREATOR: CESAR CORTES
* MODIFICATION DATE: 2025/01/09
************************************************************** */
  CSL_0 CONSTANT SIMPLE_INTEGER := 0;
BEGIN
  PA_STATUS_CODE := CSL_0;
  PA_STATUS_MSG := 'OK';
  PA_UPDATED_ROWS  := CSL_0;

  MERGE INTO SC_CREDIT.TC_OPERATION_TYPE A
  USING (
    SELECT
      *
    FROM
      JSON_TABLE ( PA_SYNC_JSON, '$.operationType[*]'
        COLUMNS (
          ID NUMBER PATH '$.id',
          DESCRIPTION VARCHAR2 ( 80 ) PATH '$.description',
          LOAN_STATUS NUMBER PATH '$.loandStatus',
          OPERATION_SIGN NUMBER PATH '$.operationSign',
          CONCEPT_VOID NUMBER PATH '$.conceptVoid',
          STATUS NUMBER  PATH '$.status',
          USER_NAME VARCHAR2 ( 30 ) PATH '$.user',
          CREATEDDATE TIMESTAMP PATH '$.createdDate',
          MODIFICATIONDATE TIMESTAMP PATH '$.modificationDate'
        )
      )
  ) B ON ( A.FI_OPERATION_TYPE_ID = B.ID )
  WHEN MATCHED THEN UPDATE
  SET
	A.FC_OPERATION_TYPE_DESC  = B.DESCRIPTION,
	A.FI_LOAN_STATUS_ID  = B.LOAN_STATUS,
	A.FI_OPERATION_SIGN_ID = nvl(B.OPERATION_SIGN,A.FI_OPERATION_SIGN_ID),
	A.FI_CONCEPT_VOID     = nvl(B.CONCEPT_VOID, A.FI_CONCEPT_VOID),
	A.FI_STATUS           = B.STATUS,
  A.FC_USER                      = B.USER_NAME,
	A.FD_CREATED_DATE  = B.CREATEDDATE,
  A.FD_MODIFICATION_DATE = CAST(B.MODIFICATIONDATE AS DATE)
  WHEN NOT MATCHED THEN
  INSERT (
    FI_OPERATION_TYPE_ID,
    FC_OPERATION_TYPE_DESC,
    FI_LOAN_STATUS_ID,
    FI_OPERATION_SIGN_ID,
    FI_CONCEPT_VOID,
    FI_STATUS,
    FC_USER,
    FD_CREATED_DATE,
    FD_MODIFICATION_DATE)
  VALUES
    ( B.ID,
      B.DESCRIPTION,
      B.LOAN_STATUS,
      B.OPERATION_SIGN,
      B.CONCEPT_VOID,
      B.STATUS,
      B.USER_NAME,
      B.CREATEDDATE,
      B.MODIFICATIONDATE);

      PA_UPDATED_ROWS := SQL%ROWCOUNT;

  COMMIT;

  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      PA_STATUS_CODE := SQLCODE;
    PA_STATUS_MSG  := SQLERRM;
      SC_CREDIT.SP_ERROR_LOG('SP_SYNC_OPERATION_TYPE', SQLCODE, SQLERRM, DBMS_UTILITY.FORMAT_ERROR_BACKTRACE, NULL,'');

  END SP_SYNC_OPERATION_TYPE;

/

GRANT EXECUTE ON SC_CREDIT.SP_SYNC_OPERATION_TYPE TO USRPURPOSEWS
/
GRANT EXECUTE ON SC_CREDIT.SP_SYNC_OPERATION_TYPE TO USRNCPCREDIT1
/
