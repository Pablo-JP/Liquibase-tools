CREATE OR REPLACE  PROCEDURE SC_CREDIT.SP_INS_LOAN_OP_TENDER (
  PA_LOAN_ID           IN SC_CREDIT.TA_LOAN_OPERATION_TENDER.FI_LOAN_ID%TYPE,
  PA_LOAN_OPERATION_ID IN SC_CREDIT.TA_LOAN_OPERATION_TENDER.FI_LOAN_OPERATION_ID%TYPE,
  PA_ADMIN_CENTER_ID   IN SC_CREDIT.TA_LOAN_OPERATION_TENDER.FI_ADMIN_CENTER_ID%TYPE,
  PA_TENDERS_AMOUNTS   IN VARCHAR2,
  PA_FC_USER           IN SC_CREDIT.TA_LOAN_OPERATION_TENDER.FC_USER%TYPE,
  PA_STATUS_MSG        OUT VARCHAR2,
  PA_STATUS_CODE       OUT NUMBER
)
/* **********************************************************************
 * PROJECT: CORE LOAN
 * DESCRIPTION: PROCEDURE FOR GETTING LOAN_OPERATION_ID CORRESPONDING
 *              TO PAYMENT IN CASH TO BE REVERSED.
 * PRECONDITIONS: PRE-EXISTING LOANS AND OPERATIONS
 * CREATED DATE: 09/12/2024
 * CREATOR: GILBERTO CHAVEZ MUNOZ
 * MODIFICATION: 2025-01-15 CESAR SANCHEZ HERNANDEZ
 * [NCPRDC-5152 V2.0.0]
 ***********************************************************************/
IS
  CSL_0            CONSTANT SIMPLE_INTEGER := 0;
  CSL_1            CONSTANT SIMPLE_INTEGER := 1;
  CSL_204          CONSTANT SIMPLE_INTEGER := 204;
  CSL_409          CONSTANT SIMPLE_INTEGER := 409;
  CSL_ARROW        CONSTANT VARCHAR2(5) := '->';
  CSL_JSON         CONSTANT VARCHAR2(5) := NULL;
  CSL_SUCCESS      CONSTANT VARCHAR2(8) := 'SUCCESS';
  CSL_NO_INSERTION CONSTANT VARCHAR2(20) := 'NO DATA INSERTED';
  CSL_DUPLICATE    CONSTANT VARCHAR2(50) := 'RECORD ALREADY EXISTS';
  CSL_SP           CONSTANT SIMPLE_INTEGER := 1;
  VL_TENDER_SEQ    NUMBER := 1;
  VL_EXISTE        NUMBER := 0;

BEGIN
  PA_STATUS_CODE := CSL_0;
  PA_STATUS_MSG  := CSL_SUCCESS;

FOR rec IN (
    SELECT VG_TENDER_TYPE_ID,
           VG_OPERATION_AMOUNT
    FROM JSON_TABLE(
      PA_TENDERS_AMOUNTS,
      '$[*]' COLUMNS (
        VG_TENDER_TYPE_ID    NUMBER PATH '$.id',
        VG_OPERATION_AMOUNT  NUMBER PATH '$.amount'
      )
    )
  ) LOOP


SELECT COUNT(1)
INTO VL_EXISTE
FROM SC_CREDIT.TA_LOAN_OPERATION_TENDER
WHERE FI_LOAN_ID = PA_LOAN_ID
  AND FI_ADMIN_CENTER_ID = PA_ADMIN_CENTER_ID
  AND FI_LOAN_OPERATION_ID = PA_LOAN_OPERATION_ID
  AND FI_OPERATION_TENDER_SEQ = VL_TENDER_SEQ
  AND FI_TENDER_TYPE_ID = rec.VG_TENDER_TYPE_ID;

IF VL_EXISTE > 0 THEN
        PA_STATUS_CODE := CSL_409;
        PA_STATUS_MSG := CSL_DUPLICATE;
ROLLBACK;
RETURN;
END IF;


INSERT INTO SC_CREDIT.TA_LOAN_OPERATION_TENDER
(FI_LOAN_OPERATION_ID, FI_ADMIN_CENTER_ID, FI_TENDER_TYPE_ID, FI_OPERATION_TENDER_SEQ, FN_OPERATION_AMOUNT, FI_STATUS, FC_USER, FD_CREATED_DATE, FD_MODIFICATION_DATE, FI_LOAN_ID)
VALUES
    (PA_LOAN_OPERATION_ID, PA_ADMIN_CENTER_ID, rec.VG_TENDER_TYPE_ID, VL_TENDER_SEQ, rec.VG_OPERATION_AMOUNT, CSL_1, PA_FC_USER, SYSDATE, SYSDATE, PA_LOAN_ID);

VL_TENDER_SEQ := VL_TENDER_SEQ + 1;
END LOOP;

COMMIT;

EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    PA_STATUS_CODE := CSL_204;
    PA_STATUS_MSG := SQLERRM || CSL_ARROW || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;

    SC_CREDIT.SP_ERROR_LOG(
       UTL_CALL_STACK.SUBPROGRAM(CSL_1)(CSL_SP),
       SQLCODE,
       SQLERRM,
       DBMS_UTILITY.FORMAT_ERROR_BACKTRACE,
       NULL,
       CSL_JSON
    );
END SP_INS_LOAN_OP_TENDER;

/

GRANT EXECUTE ON SC_CREDIT.SP_INS_LOAN_OP_TENDER TO USRNCPCREDIT1
/
